// Copyright 2022-2023 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by connect-kotlin. DO NOT EDIT.
//
// Source: buf/connect/demo/eliza/v1/eliza.proto
//
package build.buf.connect.demo.eliza.v1

import build.buf.connect.BidirectionalStreamInterface
import build.buf.connect.Headers
import build.buf.connect.MethodSpec
import build.buf.connect.ProtocolClientInterface
import build.buf.connect.ResponseMessage
import build.buf.connect.ServerOnlyStreamInterface

/**
 *  ElizaService provides a way to talk to the ELIZA, which is a port of
 *  the DOCTOR script for Joseph Weizenbaum's original ELIZA program.
 *  Created in the mid-1960s at the MIT Artificial Intelligence Laboratory,
 *  ELIZA demonstrates the superficiality of human-computer communication.
 *  DOCTOR simulates a psychotherapist, and is commonly found as an Easter
 *  egg in emacs distributions.
 */
public class ElizaServiceClient(
  private val client: ProtocolClientInterface,
) : ElizaServiceClientInterface {
  /**
   *  Say is a unary request demo. This method should allow for a one sentence
   *  response given a one sentence request.
   */
  public override suspend fun say(request: SayRequest, headers: Headers):
      ResponseMessage<SayResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "buf.connect.demo.eliza.v1.ElizaService/Say",
      build.buf.connect.demo.eliza.v1.SayRequest::class,
      build.buf.connect.demo.eliza.v1.SayResponse::class,
    ),
  )


  /**
   *  Converse is a bi-directional streaming request demo. This method should allow for
   *  many requests and many responses.
   */
  public override suspend fun converse(headers: Headers):
      BidirectionalStreamInterface<ConverseRequest, ConverseResponse> = client.stream(
    headers,
    MethodSpec(
    "buf.connect.demo.eliza.v1.ElizaService/Converse",
      build.buf.connect.demo.eliza.v1.ConverseRequest::class,
      build.buf.connect.demo.eliza.v1.ConverseResponse::class,
    ),
  )


  /**
   *  Introduce is a server-streaming request demo.  This method allows for a single request that
   * will return a series
   *  of responses
   */
  public override suspend fun introduce(headers: Headers):
      ServerOnlyStreamInterface<IntroduceRequest, IntroduceResponse> = client.serverStream(
    headers,
    MethodSpec(
    "buf.connect.demo.eliza.v1.ElizaService/Introduce",
      build.buf.connect.demo.eliza.v1.IntroduceRequest::class,
      build.buf.connect.demo.eliza.v1.IntroduceResponse::class,
    ),
  )

}
