// Copyright 2022-2023 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by connect-kotlin. DO NOT EDIT.
//
// Source: grpc/testing/test.proto
//
package grpc.testing

import build.buf.connect.Headers
import build.buf.connect.MethodSpec
import build.buf.connect.ProtocolClientInterface
import build.buf.connect.ResponseMessage
import build.buf.connect.ServerOnlyStreamInterface
import build.buf.connect.http.Cancelable
import kotlin.Unit

/**
 *  A simple service NOT implemented at servers so clients can test for
 *  that case.
 */
public class UnimplementedServiceClient(
  private val client: ProtocolClientInterface,
) : UnimplementedServiceClientInterface {
  /**
   *  A call that no server should implement
   */
  public override suspend fun unimplementedCall(request: EmptyOuterClass.Empty, headers: Headers):
      ResponseMessage<EmptyOuterClass.Empty> = client.unary(
    request,
    headers,
    MethodSpec(
    "grpc.testing.UnimplementedService/UnimplementedCall",
      grpc.testing.EmptyOuterClass.Empty::class,
      grpc.testing.EmptyOuterClass.Empty::class,
    ),
  )


  /**
   *  A call that no server should implement
   */
  public override fun unimplementedCall(
    request: EmptyOuterClass.Empty,
    headers: Headers,
    onResult: (ResponseMessage<EmptyOuterClass.Empty>) -> Unit,
  ): Cancelable = client.unary(
    request,
    headers,
    MethodSpec(
    "grpc.testing.UnimplementedService/UnimplementedCall",
      grpc.testing.EmptyOuterClass.Empty::class,
      grpc.testing.EmptyOuterClass.Empty::class,
    ),
    onResult
  )


  /**
   *  A call that no server should implement
   */
  public override suspend fun unimplementedStreamingOutputCall(headers: Headers):
      ServerOnlyStreamInterface<EmptyOuterClass.Empty, EmptyOuterClass.Empty> = client.serverStream(
    headers,
    MethodSpec(
    "grpc.testing.UnimplementedService/UnimplementedStreamingOutputCall",
      grpc.testing.EmptyOuterClass.Empty::class,
      grpc.testing.EmptyOuterClass.Empty::class,
    ),
  )

}
