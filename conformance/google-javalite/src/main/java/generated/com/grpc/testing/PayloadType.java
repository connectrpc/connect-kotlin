// Copyright 2022-2023 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: grpc/testing/messages.proto

package com.grpc.testing;

/**
 * <pre>
 * The type of payload that should be returned.
 * </pre>
 *
 * Protobuf enum {@code grpc.testing.PayloadType}
 */
public enum PayloadType
    implements com.google.protobuf.Internal.EnumLite {
  /**
   * <pre>
   * Compressable text format.
   * </pre>
   *
   * <code>COMPRESSABLE = 0;</code>
   */
  COMPRESSABLE(0),
  UNRECOGNIZED(-1),
  ;

  /**
   * <pre>
   * Compressable text format.
   * </pre>
   *
   * <code>COMPRESSABLE = 0;</code>
   */
  public static final int COMPRESSABLE_VALUE = 0;


  @java.lang.Override
  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @param value The number of the enum to look for.
   * @return The enum associated with the given number.
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static PayloadType valueOf(int value) {
    return forNumber(value);
  }

  public static PayloadType forNumber(int value) {
    switch (value) {
      case 0: return COMPRESSABLE;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<PayloadType>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      PayloadType> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<PayloadType>() {
          @java.lang.Override
          public PayloadType findValueByNumber(int number) {
            return PayloadType.forNumber(number);
          }
        };

  public static com.google.protobuf.Internal.EnumVerifier 
      internalGetVerifier() {
    return PayloadTypeVerifier.INSTANCE;
  }

  private static final class PayloadTypeVerifier implements 
       com.google.protobuf.Internal.EnumVerifier { 
          static final com.google.protobuf.Internal.EnumVerifier           INSTANCE = new PayloadTypeVerifier();
          @java.lang.Override
          public boolean isInRange(int number) {
            return PayloadType.forNumber(number) != null;
          }
        };

  private final int value;

  private PayloadType(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:grpc.testing.PayloadType)
}

