// Copyright 2022-2023 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: grpc/testing/messages.proto

package com.grpc.testing;

/**
 * <pre>
 * Unary request.
 * </pre>
 *
 * Protobuf type {@code grpc.testing.SimpleRequest}
 */
public  final class SimpleRequest extends
    com.google.protobuf.GeneratedMessageLite<
        SimpleRequest, SimpleRequest.Builder> implements
    // @@protoc_insertion_point(message_implements:grpc.testing.SimpleRequest)
    SimpleRequestOrBuilder {
  private SimpleRequest() {
  }
  public static final int RESPONSE_TYPE_FIELD_NUMBER = 1;
  private int responseType_;
  /**
   * <pre>
   * Desired payload type in the response from the server.
   * If response_type is RANDOM, server randomly chooses one from other formats.
   * </pre>
   *
   * <code>.grpc.testing.PayloadType response_type = 1 [json_name = "responseType"];</code>
   * @return The enum numeric value on the wire for responseType.
   */
  @java.lang.Override
  public int getResponseTypeValue() {
    return responseType_;
  }
  /**
   * <pre>
   * Desired payload type in the response from the server.
   * If response_type is RANDOM, server randomly chooses one from other formats.
   * </pre>
   *
   * <code>.grpc.testing.PayloadType response_type = 1 [json_name = "responseType"];</code>
   * @return The responseType.
   */
  @java.lang.Override
  public com.grpc.testing.PayloadType getResponseType() {
    com.grpc.testing.PayloadType result = com.grpc.testing.PayloadType.forNumber(responseType_);
    return result == null ? com.grpc.testing.PayloadType.UNRECOGNIZED : result;
  }
  /**
   * <pre>
   * Desired payload type in the response from the server.
   * If response_type is RANDOM, server randomly chooses one from other formats.
   * </pre>
   *
   * <code>.grpc.testing.PayloadType response_type = 1 [json_name = "responseType"];</code>
   * @param value The enum numeric value on the wire for responseType to set.
   */
  private void setResponseTypeValue(int value) {
      responseType_ = value;
  }
  /**
   * <pre>
   * Desired payload type in the response from the server.
   * If response_type is RANDOM, server randomly chooses one from other formats.
   * </pre>
   *
   * <code>.grpc.testing.PayloadType response_type = 1 [json_name = "responseType"];</code>
   * @param value The responseType to set.
   */
  private void setResponseType(com.grpc.testing.PayloadType value) {
    responseType_ = value.getNumber();
    
  }
  /**
   * <pre>
   * Desired payload type in the response from the server.
   * If response_type is RANDOM, server randomly chooses one from other formats.
   * </pre>
   *
   * <code>.grpc.testing.PayloadType response_type = 1 [json_name = "responseType"];</code>
   */
  private void clearResponseType() {
    
    responseType_ = 0;
  }

  public static final int RESPONSE_SIZE_FIELD_NUMBER = 2;
  private int responseSize_;
  /**
   * <pre>
   * Desired payload size in the response from the server.
   * </pre>
   *
   * <code>int32 response_size = 2 [json_name = "responseSize"];</code>
   * @return The responseSize.
   */
  @java.lang.Override
  public int getResponseSize() {
    return responseSize_;
  }
  /**
   * <pre>
   * Desired payload size in the response from the server.
   * </pre>
   *
   * <code>int32 response_size = 2 [json_name = "responseSize"];</code>
   * @param value The responseSize to set.
   */
  private void setResponseSize(int value) {
    
    responseSize_ = value;
  }
  /**
   * <pre>
   * Desired payload size in the response from the server.
   * </pre>
   *
   * <code>int32 response_size = 2 [json_name = "responseSize"];</code>
   */
  private void clearResponseSize() {
    
    responseSize_ = 0;
  }

  public static final int PAYLOAD_FIELD_NUMBER = 3;
  private com.grpc.testing.Payload payload_;
  /**
   * <pre>
   * Optional input payload sent along with the request.
   * </pre>
   *
   * <code>.grpc.testing.Payload payload = 3 [json_name = "payload"];</code>
   */
  @java.lang.Override
  public boolean hasPayload() {
    return payload_ != null;
  }
  /**
   * <pre>
   * Optional input payload sent along with the request.
   * </pre>
   *
   * <code>.grpc.testing.Payload payload = 3 [json_name = "payload"];</code>
   */
  @java.lang.Override
  public com.grpc.testing.Payload getPayload() {
    return payload_ == null ? com.grpc.testing.Payload.getDefaultInstance() : payload_;
  }
  /**
   * <pre>
   * Optional input payload sent along with the request.
   * </pre>
   *
   * <code>.grpc.testing.Payload payload = 3 [json_name = "payload"];</code>
   */
  private void setPayload(com.grpc.testing.Payload value) {
    value.getClass();
  payload_ = value;
    
    }
  /**
   * <pre>
   * Optional input payload sent along with the request.
   * </pre>
   *
   * <code>.grpc.testing.Payload payload = 3 [json_name = "payload"];</code>
   */
  @java.lang.SuppressWarnings({"ReferenceEquality"})
  private void mergePayload(com.grpc.testing.Payload value) {
    value.getClass();
  if (payload_ != null &&
        payload_ != com.grpc.testing.Payload.getDefaultInstance()) {
      payload_ =
        com.grpc.testing.Payload.newBuilder(payload_).mergeFrom(value).buildPartial();
    } else {
      payload_ = value;
    }
    
  }
  /**
   * <pre>
   * Optional input payload sent along with the request.
   * </pre>
   *
   * <code>.grpc.testing.Payload payload = 3 [json_name = "payload"];</code>
   */
  private void clearPayload() {  payload_ = null;
    
  }

  public static final int FILL_USERNAME_FIELD_NUMBER = 4;
  private boolean fillUsername_;
  /**
   * <pre>
   * Whether SimpleResponse should include username.
   * </pre>
   *
   * <code>bool fill_username = 4 [json_name = "fillUsername"];</code>
   * @return The fillUsername.
   */
  @java.lang.Override
  public boolean getFillUsername() {
    return fillUsername_;
  }
  /**
   * <pre>
   * Whether SimpleResponse should include username.
   * </pre>
   *
   * <code>bool fill_username = 4 [json_name = "fillUsername"];</code>
   * @param value The fillUsername to set.
   */
  private void setFillUsername(boolean value) {
    
    fillUsername_ = value;
  }
  /**
   * <pre>
   * Whether SimpleResponse should include username.
   * </pre>
   *
   * <code>bool fill_username = 4 [json_name = "fillUsername"];</code>
   */
  private void clearFillUsername() {
    
    fillUsername_ = false;
  }

  public static final int FILL_OAUTH_SCOPE_FIELD_NUMBER = 5;
  private boolean fillOauthScope_;
  /**
   * <pre>
   * Whether SimpleResponse should include OAuth scope.
   * </pre>
   *
   * <code>bool fill_oauth_scope = 5 [json_name = "fillOauthScope"];</code>
   * @return The fillOauthScope.
   */
  @java.lang.Override
  public boolean getFillOauthScope() {
    return fillOauthScope_;
  }
  /**
   * <pre>
   * Whether SimpleResponse should include OAuth scope.
   * </pre>
   *
   * <code>bool fill_oauth_scope = 5 [json_name = "fillOauthScope"];</code>
   * @param value The fillOauthScope to set.
   */
  private void setFillOauthScope(boolean value) {
    
    fillOauthScope_ = value;
  }
  /**
   * <pre>
   * Whether SimpleResponse should include OAuth scope.
   * </pre>
   *
   * <code>bool fill_oauth_scope = 5 [json_name = "fillOauthScope"];</code>
   */
  private void clearFillOauthScope() {
    
    fillOauthScope_ = false;
  }

  public static final int RESPONSE_COMPRESSED_FIELD_NUMBER = 6;
  private com.grpc.testing.BoolValue responseCompressed_;
  /**
   * <pre>
   * Whether to request the server to compress the response. This field is
   * "nullable" in order to interoperate seamlessly with clients not able to
   * implement the full compression tests by introspecting the call to verify
   * the response's compression status.
   * </pre>
   *
   * <code>.grpc.testing.BoolValue response_compressed = 6 [json_name = "responseCompressed"];</code>
   */
  @java.lang.Override
  public boolean hasResponseCompressed() {
    return responseCompressed_ != null;
  }
  /**
   * <pre>
   * Whether to request the server to compress the response. This field is
   * "nullable" in order to interoperate seamlessly with clients not able to
   * implement the full compression tests by introspecting the call to verify
   * the response's compression status.
   * </pre>
   *
   * <code>.grpc.testing.BoolValue response_compressed = 6 [json_name = "responseCompressed"];</code>
   */
  @java.lang.Override
  public com.grpc.testing.BoolValue getResponseCompressed() {
    return responseCompressed_ == null ? com.grpc.testing.BoolValue.getDefaultInstance() : responseCompressed_;
  }
  /**
   * <pre>
   * Whether to request the server to compress the response. This field is
   * "nullable" in order to interoperate seamlessly with clients not able to
   * implement the full compression tests by introspecting the call to verify
   * the response's compression status.
   * </pre>
   *
   * <code>.grpc.testing.BoolValue response_compressed = 6 [json_name = "responseCompressed"];</code>
   */
  private void setResponseCompressed(com.grpc.testing.BoolValue value) {
    value.getClass();
  responseCompressed_ = value;
    
    }
  /**
   * <pre>
   * Whether to request the server to compress the response. This field is
   * "nullable" in order to interoperate seamlessly with clients not able to
   * implement the full compression tests by introspecting the call to verify
   * the response's compression status.
   * </pre>
   *
   * <code>.grpc.testing.BoolValue response_compressed = 6 [json_name = "responseCompressed"];</code>
   */
  @java.lang.SuppressWarnings({"ReferenceEquality"})
  private void mergeResponseCompressed(com.grpc.testing.BoolValue value) {
    value.getClass();
  if (responseCompressed_ != null &&
        responseCompressed_ != com.grpc.testing.BoolValue.getDefaultInstance()) {
      responseCompressed_ =
        com.grpc.testing.BoolValue.newBuilder(responseCompressed_).mergeFrom(value).buildPartial();
    } else {
      responseCompressed_ = value;
    }
    
  }
  /**
   * <pre>
   * Whether to request the server to compress the response. This field is
   * "nullable" in order to interoperate seamlessly with clients not able to
   * implement the full compression tests by introspecting the call to verify
   * the response's compression status.
   * </pre>
   *
   * <code>.grpc.testing.BoolValue response_compressed = 6 [json_name = "responseCompressed"];</code>
   */
  private void clearResponseCompressed() {  responseCompressed_ = null;
    
  }

  public static final int RESPONSE_STATUS_FIELD_NUMBER = 7;
  private com.grpc.testing.EchoStatus responseStatus_;
  /**
   * <pre>
   * Whether server should return a given status
   * </pre>
   *
   * <code>.grpc.testing.EchoStatus response_status = 7 [json_name = "responseStatus"];</code>
   */
  @java.lang.Override
  public boolean hasResponseStatus() {
    return responseStatus_ != null;
  }
  /**
   * <pre>
   * Whether server should return a given status
   * </pre>
   *
   * <code>.grpc.testing.EchoStatus response_status = 7 [json_name = "responseStatus"];</code>
   */
  @java.lang.Override
  public com.grpc.testing.EchoStatus getResponseStatus() {
    return responseStatus_ == null ? com.grpc.testing.EchoStatus.getDefaultInstance() : responseStatus_;
  }
  /**
   * <pre>
   * Whether server should return a given status
   * </pre>
   *
   * <code>.grpc.testing.EchoStatus response_status = 7 [json_name = "responseStatus"];</code>
   */
  private void setResponseStatus(com.grpc.testing.EchoStatus value) {
    value.getClass();
  responseStatus_ = value;
    
    }
  /**
   * <pre>
   * Whether server should return a given status
   * </pre>
   *
   * <code>.grpc.testing.EchoStatus response_status = 7 [json_name = "responseStatus"];</code>
   */
  @java.lang.SuppressWarnings({"ReferenceEquality"})
  private void mergeResponseStatus(com.grpc.testing.EchoStatus value) {
    value.getClass();
  if (responseStatus_ != null &&
        responseStatus_ != com.grpc.testing.EchoStatus.getDefaultInstance()) {
      responseStatus_ =
        com.grpc.testing.EchoStatus.newBuilder(responseStatus_).mergeFrom(value).buildPartial();
    } else {
      responseStatus_ = value;
    }
    
  }
  /**
   * <pre>
   * Whether server should return a given status
   * </pre>
   *
   * <code>.grpc.testing.EchoStatus response_status = 7 [json_name = "responseStatus"];</code>
   */
  private void clearResponseStatus() {  responseStatus_ = null;
    
  }

  public static final int EXPECT_COMPRESSED_FIELD_NUMBER = 8;
  private com.grpc.testing.BoolValue expectCompressed_;
  /**
   * <pre>
   * Whether the server should expect this request to be compressed.
   * </pre>
   *
   * <code>.grpc.testing.BoolValue expect_compressed = 8 [json_name = "expectCompressed"];</code>
   */
  @java.lang.Override
  public boolean hasExpectCompressed() {
    return expectCompressed_ != null;
  }
  /**
   * <pre>
   * Whether the server should expect this request to be compressed.
   * </pre>
   *
   * <code>.grpc.testing.BoolValue expect_compressed = 8 [json_name = "expectCompressed"];</code>
   */
  @java.lang.Override
  public com.grpc.testing.BoolValue getExpectCompressed() {
    return expectCompressed_ == null ? com.grpc.testing.BoolValue.getDefaultInstance() : expectCompressed_;
  }
  /**
   * <pre>
   * Whether the server should expect this request to be compressed.
   * </pre>
   *
   * <code>.grpc.testing.BoolValue expect_compressed = 8 [json_name = "expectCompressed"];</code>
   */
  private void setExpectCompressed(com.grpc.testing.BoolValue value) {
    value.getClass();
  expectCompressed_ = value;
    
    }
  /**
   * <pre>
   * Whether the server should expect this request to be compressed.
   * </pre>
   *
   * <code>.grpc.testing.BoolValue expect_compressed = 8 [json_name = "expectCompressed"];</code>
   */
  @java.lang.SuppressWarnings({"ReferenceEquality"})
  private void mergeExpectCompressed(com.grpc.testing.BoolValue value) {
    value.getClass();
  if (expectCompressed_ != null &&
        expectCompressed_ != com.grpc.testing.BoolValue.getDefaultInstance()) {
      expectCompressed_ =
        com.grpc.testing.BoolValue.newBuilder(expectCompressed_).mergeFrom(value).buildPartial();
    } else {
      expectCompressed_ = value;
    }
    
  }
  /**
   * <pre>
   * Whether the server should expect this request to be compressed.
   * </pre>
   *
   * <code>.grpc.testing.BoolValue expect_compressed = 8 [json_name = "expectCompressed"];</code>
   */
  private void clearExpectCompressed() {  expectCompressed_ = null;
    
  }

  public static final int FILL_SERVER_ID_FIELD_NUMBER = 9;
  private boolean fillServerId_;
  /**
   * <pre>
   * Whether SimpleResponse should include server_id.
   * </pre>
   *
   * <code>bool fill_server_id = 9 [json_name = "fillServerId"];</code>
   * @return The fillServerId.
   */
  @java.lang.Override
  public boolean getFillServerId() {
    return fillServerId_;
  }
  /**
   * <pre>
   * Whether SimpleResponse should include server_id.
   * </pre>
   *
   * <code>bool fill_server_id = 9 [json_name = "fillServerId"];</code>
   * @param value The fillServerId to set.
   */
  private void setFillServerId(boolean value) {
    
    fillServerId_ = value;
  }
  /**
   * <pre>
   * Whether SimpleResponse should include server_id.
   * </pre>
   *
   * <code>bool fill_server_id = 9 [json_name = "fillServerId"];</code>
   */
  private void clearFillServerId() {
    
    fillServerId_ = false;
  }

  public static final int FILL_GRPCLB_ROUTE_TYPE_FIELD_NUMBER = 10;
  private boolean fillGrpclbRouteType_;
  /**
   * <pre>
   * Whether SimpleResponse should include grpclb_route_type.
   * </pre>
   *
   * <code>bool fill_grpclb_route_type = 10 [json_name = "fillGrpclbRouteType"];</code>
   * @return The fillGrpclbRouteType.
   */
  @java.lang.Override
  public boolean getFillGrpclbRouteType() {
    return fillGrpclbRouteType_;
  }
  /**
   * <pre>
   * Whether SimpleResponse should include grpclb_route_type.
   * </pre>
   *
   * <code>bool fill_grpclb_route_type = 10 [json_name = "fillGrpclbRouteType"];</code>
   * @param value The fillGrpclbRouteType to set.
   */
  private void setFillGrpclbRouteType(boolean value) {
    
    fillGrpclbRouteType_ = value;
  }
  /**
   * <pre>
   * Whether SimpleResponse should include grpclb_route_type.
   * </pre>
   *
   * <code>bool fill_grpclb_route_type = 10 [json_name = "fillGrpclbRouteType"];</code>
   */
  private void clearFillGrpclbRouteType() {
    
    fillGrpclbRouteType_ = false;
  }

  public static com.grpc.testing.SimpleRequest parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static com.grpc.testing.SimpleRequest parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static com.grpc.testing.SimpleRequest parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static com.grpc.testing.SimpleRequest parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static com.grpc.testing.SimpleRequest parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static com.grpc.testing.SimpleRequest parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static com.grpc.testing.SimpleRequest parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static com.grpc.testing.SimpleRequest parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static com.grpc.testing.SimpleRequest parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }
  public static com.grpc.testing.SimpleRequest parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static com.grpc.testing.SimpleRequest parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static com.grpc.testing.SimpleRequest parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return (Builder) DEFAULT_INSTANCE.createBuilder();
  }
  public static Builder newBuilder(com.grpc.testing.SimpleRequest prototype) {
    return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
  }

  /**
   * <pre>
   * Unary request.
   * </pre>
   *
   * Protobuf type {@code grpc.testing.SimpleRequest}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageLite.Builder<
        com.grpc.testing.SimpleRequest, Builder> implements
      // @@protoc_insertion_point(builder_implements:grpc.testing.SimpleRequest)
      com.grpc.testing.SimpleRequestOrBuilder {
    // Construct using com.grpc.testing.SimpleRequest.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }


    /**
     * <pre>
     * Desired payload type in the response from the server.
     * If response_type is RANDOM, server randomly chooses one from other formats.
     * </pre>
     *
     * <code>.grpc.testing.PayloadType response_type = 1 [json_name = "responseType"];</code>
     * @return The enum numeric value on the wire for responseType.
     */
    @java.lang.Override
    public int getResponseTypeValue() {
      return instance.getResponseTypeValue();
    }
    /**
     * <pre>
     * Desired payload type in the response from the server.
     * If response_type is RANDOM, server randomly chooses one from other formats.
     * </pre>
     *
     * <code>.grpc.testing.PayloadType response_type = 1 [json_name = "responseType"];</code>
     * @param value The responseType to set.
     * @return This builder for chaining.
     */
    public Builder setResponseTypeValue(int value) {
      copyOnWrite();
      instance.setResponseTypeValue(value);
      return this;
    }
    /**
     * <pre>
     * Desired payload type in the response from the server.
     * If response_type is RANDOM, server randomly chooses one from other formats.
     * </pre>
     *
     * <code>.grpc.testing.PayloadType response_type = 1 [json_name = "responseType"];</code>
     * @return The responseType.
     */
    @java.lang.Override
    public com.grpc.testing.PayloadType getResponseType() {
      return instance.getResponseType();
    }
    /**
     * <pre>
     * Desired payload type in the response from the server.
     * If response_type is RANDOM, server randomly chooses one from other formats.
     * </pre>
     *
     * <code>.grpc.testing.PayloadType response_type = 1 [json_name = "responseType"];</code>
     * @param value The enum numeric value on the wire for responseType to set.
     * @return This builder for chaining.
     */
    public Builder setResponseType(com.grpc.testing.PayloadType value) {
      copyOnWrite();
      instance.setResponseType(value);
      return this;
    }
    /**
     * <pre>
     * Desired payload type in the response from the server.
     * If response_type is RANDOM, server randomly chooses one from other formats.
     * </pre>
     *
     * <code>.grpc.testing.PayloadType response_type = 1 [json_name = "responseType"];</code>
     * @return This builder for chaining.
     */
    public Builder clearResponseType() {
      copyOnWrite();
      instance.clearResponseType();
      return this;
    }

    /**
     * <pre>
     * Desired payload size in the response from the server.
     * </pre>
     *
     * <code>int32 response_size = 2 [json_name = "responseSize"];</code>
     * @return The responseSize.
     */
    @java.lang.Override
    public int getResponseSize() {
      return instance.getResponseSize();
    }
    /**
     * <pre>
     * Desired payload size in the response from the server.
     * </pre>
     *
     * <code>int32 response_size = 2 [json_name = "responseSize"];</code>
     * @param value The responseSize to set.
     * @return This builder for chaining.
     */
    public Builder setResponseSize(int value) {
      copyOnWrite();
      instance.setResponseSize(value);
      return this;
    }
    /**
     * <pre>
     * Desired payload size in the response from the server.
     * </pre>
     *
     * <code>int32 response_size = 2 [json_name = "responseSize"];</code>
     * @return This builder for chaining.
     */
    public Builder clearResponseSize() {
      copyOnWrite();
      instance.clearResponseSize();
      return this;
    }

    /**
     * <pre>
     * Optional input payload sent along with the request.
     * </pre>
     *
     * <code>.grpc.testing.Payload payload = 3 [json_name = "payload"];</code>
     */
    @java.lang.Override
    public boolean hasPayload() {
      return instance.hasPayload();
    }
    /**
     * <pre>
     * Optional input payload sent along with the request.
     * </pre>
     *
     * <code>.grpc.testing.Payload payload = 3 [json_name = "payload"];</code>
     */
    @java.lang.Override
    public com.grpc.testing.Payload getPayload() {
      return instance.getPayload();
    }
    /**
     * <pre>
     * Optional input payload sent along with the request.
     * </pre>
     *
     * <code>.grpc.testing.Payload payload = 3 [json_name = "payload"];</code>
     */
    public Builder setPayload(com.grpc.testing.Payload value) {
      copyOnWrite();
      instance.setPayload(value);
      return this;
      }
    /**
     * <pre>
     * Optional input payload sent along with the request.
     * </pre>
     *
     * <code>.grpc.testing.Payload payload = 3 [json_name = "payload"];</code>
     */
    public Builder setPayload(
        com.grpc.testing.Payload.Builder builderForValue) {
      copyOnWrite();
      instance.setPayload(builderForValue.build());
      return this;
    }
    /**
     * <pre>
     * Optional input payload sent along with the request.
     * </pre>
     *
     * <code>.grpc.testing.Payload payload = 3 [json_name = "payload"];</code>
     */
    public Builder mergePayload(com.grpc.testing.Payload value) {
      copyOnWrite();
      instance.mergePayload(value);
      return this;
    }
    /**
     * <pre>
     * Optional input payload sent along with the request.
     * </pre>
     *
     * <code>.grpc.testing.Payload payload = 3 [json_name = "payload"];</code>
     */
    public Builder clearPayload() {  copyOnWrite();
      instance.clearPayload();
      return this;
    }

    /**
     * <pre>
     * Whether SimpleResponse should include username.
     * </pre>
     *
     * <code>bool fill_username = 4 [json_name = "fillUsername"];</code>
     * @return The fillUsername.
     */
    @java.lang.Override
    public boolean getFillUsername() {
      return instance.getFillUsername();
    }
    /**
     * <pre>
     * Whether SimpleResponse should include username.
     * </pre>
     *
     * <code>bool fill_username = 4 [json_name = "fillUsername"];</code>
     * @param value The fillUsername to set.
     * @return This builder for chaining.
     */
    public Builder setFillUsername(boolean value) {
      copyOnWrite();
      instance.setFillUsername(value);
      return this;
    }
    /**
     * <pre>
     * Whether SimpleResponse should include username.
     * </pre>
     *
     * <code>bool fill_username = 4 [json_name = "fillUsername"];</code>
     * @return This builder for chaining.
     */
    public Builder clearFillUsername() {
      copyOnWrite();
      instance.clearFillUsername();
      return this;
    }

    /**
     * <pre>
     * Whether SimpleResponse should include OAuth scope.
     * </pre>
     *
     * <code>bool fill_oauth_scope = 5 [json_name = "fillOauthScope"];</code>
     * @return The fillOauthScope.
     */
    @java.lang.Override
    public boolean getFillOauthScope() {
      return instance.getFillOauthScope();
    }
    /**
     * <pre>
     * Whether SimpleResponse should include OAuth scope.
     * </pre>
     *
     * <code>bool fill_oauth_scope = 5 [json_name = "fillOauthScope"];</code>
     * @param value The fillOauthScope to set.
     * @return This builder for chaining.
     */
    public Builder setFillOauthScope(boolean value) {
      copyOnWrite();
      instance.setFillOauthScope(value);
      return this;
    }
    /**
     * <pre>
     * Whether SimpleResponse should include OAuth scope.
     * </pre>
     *
     * <code>bool fill_oauth_scope = 5 [json_name = "fillOauthScope"];</code>
     * @return This builder for chaining.
     */
    public Builder clearFillOauthScope() {
      copyOnWrite();
      instance.clearFillOauthScope();
      return this;
    }

    /**
     * <pre>
     * Whether to request the server to compress the response. This field is
     * "nullable" in order to interoperate seamlessly with clients not able to
     * implement the full compression tests by introspecting the call to verify
     * the response's compression status.
     * </pre>
     *
     * <code>.grpc.testing.BoolValue response_compressed = 6 [json_name = "responseCompressed"];</code>
     */
    @java.lang.Override
    public boolean hasResponseCompressed() {
      return instance.hasResponseCompressed();
    }
    /**
     * <pre>
     * Whether to request the server to compress the response. This field is
     * "nullable" in order to interoperate seamlessly with clients not able to
     * implement the full compression tests by introspecting the call to verify
     * the response's compression status.
     * </pre>
     *
     * <code>.grpc.testing.BoolValue response_compressed = 6 [json_name = "responseCompressed"];</code>
     */
    @java.lang.Override
    public com.grpc.testing.BoolValue getResponseCompressed() {
      return instance.getResponseCompressed();
    }
    /**
     * <pre>
     * Whether to request the server to compress the response. This field is
     * "nullable" in order to interoperate seamlessly with clients not able to
     * implement the full compression tests by introspecting the call to verify
     * the response's compression status.
     * </pre>
     *
     * <code>.grpc.testing.BoolValue response_compressed = 6 [json_name = "responseCompressed"];</code>
     */
    public Builder setResponseCompressed(com.grpc.testing.BoolValue value) {
      copyOnWrite();
      instance.setResponseCompressed(value);
      return this;
      }
    /**
     * <pre>
     * Whether to request the server to compress the response. This field is
     * "nullable" in order to interoperate seamlessly with clients not able to
     * implement the full compression tests by introspecting the call to verify
     * the response's compression status.
     * </pre>
     *
     * <code>.grpc.testing.BoolValue response_compressed = 6 [json_name = "responseCompressed"];</code>
     */
    public Builder setResponseCompressed(
        com.grpc.testing.BoolValue.Builder builderForValue) {
      copyOnWrite();
      instance.setResponseCompressed(builderForValue.build());
      return this;
    }
    /**
     * <pre>
     * Whether to request the server to compress the response. This field is
     * "nullable" in order to interoperate seamlessly with clients not able to
     * implement the full compression tests by introspecting the call to verify
     * the response's compression status.
     * </pre>
     *
     * <code>.grpc.testing.BoolValue response_compressed = 6 [json_name = "responseCompressed"];</code>
     */
    public Builder mergeResponseCompressed(com.grpc.testing.BoolValue value) {
      copyOnWrite();
      instance.mergeResponseCompressed(value);
      return this;
    }
    /**
     * <pre>
     * Whether to request the server to compress the response. This field is
     * "nullable" in order to interoperate seamlessly with clients not able to
     * implement the full compression tests by introspecting the call to verify
     * the response's compression status.
     * </pre>
     *
     * <code>.grpc.testing.BoolValue response_compressed = 6 [json_name = "responseCompressed"];</code>
     */
    public Builder clearResponseCompressed() {  copyOnWrite();
      instance.clearResponseCompressed();
      return this;
    }

    /**
     * <pre>
     * Whether server should return a given status
     * </pre>
     *
     * <code>.grpc.testing.EchoStatus response_status = 7 [json_name = "responseStatus"];</code>
     */
    @java.lang.Override
    public boolean hasResponseStatus() {
      return instance.hasResponseStatus();
    }
    /**
     * <pre>
     * Whether server should return a given status
     * </pre>
     *
     * <code>.grpc.testing.EchoStatus response_status = 7 [json_name = "responseStatus"];</code>
     */
    @java.lang.Override
    public com.grpc.testing.EchoStatus getResponseStatus() {
      return instance.getResponseStatus();
    }
    /**
     * <pre>
     * Whether server should return a given status
     * </pre>
     *
     * <code>.grpc.testing.EchoStatus response_status = 7 [json_name = "responseStatus"];</code>
     */
    public Builder setResponseStatus(com.grpc.testing.EchoStatus value) {
      copyOnWrite();
      instance.setResponseStatus(value);
      return this;
      }
    /**
     * <pre>
     * Whether server should return a given status
     * </pre>
     *
     * <code>.grpc.testing.EchoStatus response_status = 7 [json_name = "responseStatus"];</code>
     */
    public Builder setResponseStatus(
        com.grpc.testing.EchoStatus.Builder builderForValue) {
      copyOnWrite();
      instance.setResponseStatus(builderForValue.build());
      return this;
    }
    /**
     * <pre>
     * Whether server should return a given status
     * </pre>
     *
     * <code>.grpc.testing.EchoStatus response_status = 7 [json_name = "responseStatus"];</code>
     */
    public Builder mergeResponseStatus(com.grpc.testing.EchoStatus value) {
      copyOnWrite();
      instance.mergeResponseStatus(value);
      return this;
    }
    /**
     * <pre>
     * Whether server should return a given status
     * </pre>
     *
     * <code>.grpc.testing.EchoStatus response_status = 7 [json_name = "responseStatus"];</code>
     */
    public Builder clearResponseStatus() {  copyOnWrite();
      instance.clearResponseStatus();
      return this;
    }

    /**
     * <pre>
     * Whether the server should expect this request to be compressed.
     * </pre>
     *
     * <code>.grpc.testing.BoolValue expect_compressed = 8 [json_name = "expectCompressed"];</code>
     */
    @java.lang.Override
    public boolean hasExpectCompressed() {
      return instance.hasExpectCompressed();
    }
    /**
     * <pre>
     * Whether the server should expect this request to be compressed.
     * </pre>
     *
     * <code>.grpc.testing.BoolValue expect_compressed = 8 [json_name = "expectCompressed"];</code>
     */
    @java.lang.Override
    public com.grpc.testing.BoolValue getExpectCompressed() {
      return instance.getExpectCompressed();
    }
    /**
     * <pre>
     * Whether the server should expect this request to be compressed.
     * </pre>
     *
     * <code>.grpc.testing.BoolValue expect_compressed = 8 [json_name = "expectCompressed"];</code>
     */
    public Builder setExpectCompressed(com.grpc.testing.BoolValue value) {
      copyOnWrite();
      instance.setExpectCompressed(value);
      return this;
      }
    /**
     * <pre>
     * Whether the server should expect this request to be compressed.
     * </pre>
     *
     * <code>.grpc.testing.BoolValue expect_compressed = 8 [json_name = "expectCompressed"];</code>
     */
    public Builder setExpectCompressed(
        com.grpc.testing.BoolValue.Builder builderForValue) {
      copyOnWrite();
      instance.setExpectCompressed(builderForValue.build());
      return this;
    }
    /**
     * <pre>
     * Whether the server should expect this request to be compressed.
     * </pre>
     *
     * <code>.grpc.testing.BoolValue expect_compressed = 8 [json_name = "expectCompressed"];</code>
     */
    public Builder mergeExpectCompressed(com.grpc.testing.BoolValue value) {
      copyOnWrite();
      instance.mergeExpectCompressed(value);
      return this;
    }
    /**
     * <pre>
     * Whether the server should expect this request to be compressed.
     * </pre>
     *
     * <code>.grpc.testing.BoolValue expect_compressed = 8 [json_name = "expectCompressed"];</code>
     */
    public Builder clearExpectCompressed() {  copyOnWrite();
      instance.clearExpectCompressed();
      return this;
    }

    /**
     * <pre>
     * Whether SimpleResponse should include server_id.
     * </pre>
     *
     * <code>bool fill_server_id = 9 [json_name = "fillServerId"];</code>
     * @return The fillServerId.
     */
    @java.lang.Override
    public boolean getFillServerId() {
      return instance.getFillServerId();
    }
    /**
     * <pre>
     * Whether SimpleResponse should include server_id.
     * </pre>
     *
     * <code>bool fill_server_id = 9 [json_name = "fillServerId"];</code>
     * @param value The fillServerId to set.
     * @return This builder for chaining.
     */
    public Builder setFillServerId(boolean value) {
      copyOnWrite();
      instance.setFillServerId(value);
      return this;
    }
    /**
     * <pre>
     * Whether SimpleResponse should include server_id.
     * </pre>
     *
     * <code>bool fill_server_id = 9 [json_name = "fillServerId"];</code>
     * @return This builder for chaining.
     */
    public Builder clearFillServerId() {
      copyOnWrite();
      instance.clearFillServerId();
      return this;
    }

    /**
     * <pre>
     * Whether SimpleResponse should include grpclb_route_type.
     * </pre>
     *
     * <code>bool fill_grpclb_route_type = 10 [json_name = "fillGrpclbRouteType"];</code>
     * @return The fillGrpclbRouteType.
     */
    @java.lang.Override
    public boolean getFillGrpclbRouteType() {
      return instance.getFillGrpclbRouteType();
    }
    /**
     * <pre>
     * Whether SimpleResponse should include grpclb_route_type.
     * </pre>
     *
     * <code>bool fill_grpclb_route_type = 10 [json_name = "fillGrpclbRouteType"];</code>
     * @param value The fillGrpclbRouteType to set.
     * @return This builder for chaining.
     */
    public Builder setFillGrpclbRouteType(boolean value) {
      copyOnWrite();
      instance.setFillGrpclbRouteType(value);
      return this;
    }
    /**
     * <pre>
     * Whether SimpleResponse should include grpclb_route_type.
     * </pre>
     *
     * <code>bool fill_grpclb_route_type = 10 [json_name = "fillGrpclbRouteType"];</code>
     * @return This builder for chaining.
     */
    public Builder clearFillGrpclbRouteType() {
      copyOnWrite();
      instance.clearFillGrpclbRouteType();
      return this;
    }

    // @@protoc_insertion_point(builder_scope:grpc.testing.SimpleRequest)
  }
  @java.lang.Override
  @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
  protected final java.lang.Object dynamicMethod(
      com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
      java.lang.Object arg0, java.lang.Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE: {
        return new com.grpc.testing.SimpleRequest();
      }
      case NEW_BUILDER: {
        return new Builder();
      }
      case BUILD_MESSAGE_INFO: {
          java.lang.Object[] objects = new java.lang.Object[] {
            "responseType_",
            "responseSize_",
            "payload_",
            "fillUsername_",
            "fillOauthScope_",
            "responseCompressed_",
            "responseStatus_",
            "expectCompressed_",
            "fillServerId_",
            "fillGrpclbRouteType_",
          };
          java.lang.String info =
              "\u0000\n\u0000\u0000\u0001\n\n\u0000\u0000\u0000\u0001\f\u0002\u0004\u0003\t\u0004" +
              "\u0007\u0005\u0007\u0006\t\u0007\t\b\t\t\u0007\n\u0007";
          return newMessageInfo(DEFAULT_INSTANCE, info, objects);
      }
      // fall through
      case GET_DEFAULT_INSTANCE: {
        return DEFAULT_INSTANCE;
      }
      case GET_PARSER: {
        com.google.protobuf.Parser<com.grpc.testing.SimpleRequest> parser = PARSER;
        if (parser == null) {
          synchronized (com.grpc.testing.SimpleRequest.class) {
            parser = PARSER;
            if (parser == null) {
              parser =
                  new DefaultInstanceBasedParser<com.grpc.testing.SimpleRequest>(
                      DEFAULT_INSTANCE);
              PARSER = parser;
            }
          }
        }
        return parser;
    }
    case GET_MEMOIZED_IS_INITIALIZED: {
      return (byte) 1;
    }
    case SET_MEMOIZED_IS_INITIALIZED: {
      return null;
    }
    }
    throw new UnsupportedOperationException();
  }


  // @@protoc_insertion_point(class_scope:grpc.testing.SimpleRequest)
  private static final com.grpc.testing.SimpleRequest DEFAULT_INSTANCE;
  static {
    SimpleRequest defaultInstance = new SimpleRequest();
    // New instances are implicitly immutable so no need to make
    // immutable.
    DEFAULT_INSTANCE = defaultInstance;
    com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
      SimpleRequest.class, defaultInstance);
  }

  public static com.grpc.testing.SimpleRequest getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile com.google.protobuf.Parser<SimpleRequest> PARSER;

  public static com.google.protobuf.Parser<SimpleRequest> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}

