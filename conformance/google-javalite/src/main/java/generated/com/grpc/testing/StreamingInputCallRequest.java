// Copyright 2022-2023 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: grpc/testing/messages.proto

package com.grpc.testing;

/**
 * <pre>
 * Client-streaming request.
 * </pre>
 *
 * Protobuf type {@code grpc.testing.StreamingInputCallRequest}
 */
public  final class StreamingInputCallRequest extends
    com.google.protobuf.GeneratedMessageLite<
        StreamingInputCallRequest, StreamingInputCallRequest.Builder> implements
    // @@protoc_insertion_point(message_implements:grpc.testing.StreamingInputCallRequest)
    StreamingInputCallRequestOrBuilder {
  private StreamingInputCallRequest() {
  }
  public static final int PAYLOAD_FIELD_NUMBER = 1;
  private com.grpc.testing.Payload payload_;
  /**
   * <pre>
   * Optional input payload sent along with the request.
   * </pre>
   *
   * <code>.grpc.testing.Payload payload = 1 [json_name = "payload"];</code>
   */
  @java.lang.Override
  public boolean hasPayload() {
    return payload_ != null;
  }
  /**
   * <pre>
   * Optional input payload sent along with the request.
   * </pre>
   *
   * <code>.grpc.testing.Payload payload = 1 [json_name = "payload"];</code>
   */
  @java.lang.Override
  public com.grpc.testing.Payload getPayload() {
    return payload_ == null ? com.grpc.testing.Payload.getDefaultInstance() : payload_;
  }
  /**
   * <pre>
   * Optional input payload sent along with the request.
   * </pre>
   *
   * <code>.grpc.testing.Payload payload = 1 [json_name = "payload"];</code>
   */
  private void setPayload(com.grpc.testing.Payload value) {
    value.getClass();
  payload_ = value;
    
    }
  /**
   * <pre>
   * Optional input payload sent along with the request.
   * </pre>
   *
   * <code>.grpc.testing.Payload payload = 1 [json_name = "payload"];</code>
   */
  @java.lang.SuppressWarnings({"ReferenceEquality"})
  private void mergePayload(com.grpc.testing.Payload value) {
    value.getClass();
  if (payload_ != null &&
        payload_ != com.grpc.testing.Payload.getDefaultInstance()) {
      payload_ =
        com.grpc.testing.Payload.newBuilder(payload_).mergeFrom(value).buildPartial();
    } else {
      payload_ = value;
    }
    
  }
  /**
   * <pre>
   * Optional input payload sent along with the request.
   * </pre>
   *
   * <code>.grpc.testing.Payload payload = 1 [json_name = "payload"];</code>
   */
  private void clearPayload() {  payload_ = null;
    
  }

  public static final int EXPECT_COMPRESSED_FIELD_NUMBER = 2;
  private com.grpc.testing.BoolValue expectCompressed_;
  /**
   * <pre>
   * Whether the server should expect this request to be compressed. This field
   * is "nullable" in order to interoperate seamlessly with servers not able to
   * implement the full compression tests by introspecting the call to verify
   * the request's compression status.
   * </pre>
   *
   * <code>.grpc.testing.BoolValue expect_compressed = 2 [json_name = "expectCompressed"];</code>
   */
  @java.lang.Override
  public boolean hasExpectCompressed() {
    return expectCompressed_ != null;
  }
  /**
   * <pre>
   * Whether the server should expect this request to be compressed. This field
   * is "nullable" in order to interoperate seamlessly with servers not able to
   * implement the full compression tests by introspecting the call to verify
   * the request's compression status.
   * </pre>
   *
   * <code>.grpc.testing.BoolValue expect_compressed = 2 [json_name = "expectCompressed"];</code>
   */
  @java.lang.Override
  public com.grpc.testing.BoolValue getExpectCompressed() {
    return expectCompressed_ == null ? com.grpc.testing.BoolValue.getDefaultInstance() : expectCompressed_;
  }
  /**
   * <pre>
   * Whether the server should expect this request to be compressed. This field
   * is "nullable" in order to interoperate seamlessly with servers not able to
   * implement the full compression tests by introspecting the call to verify
   * the request's compression status.
   * </pre>
   *
   * <code>.grpc.testing.BoolValue expect_compressed = 2 [json_name = "expectCompressed"];</code>
   */
  private void setExpectCompressed(com.grpc.testing.BoolValue value) {
    value.getClass();
  expectCompressed_ = value;
    
    }
  /**
   * <pre>
   * Whether the server should expect this request to be compressed. This field
   * is "nullable" in order to interoperate seamlessly with servers not able to
   * implement the full compression tests by introspecting the call to verify
   * the request's compression status.
   * </pre>
   *
   * <code>.grpc.testing.BoolValue expect_compressed = 2 [json_name = "expectCompressed"];</code>
   */
  @java.lang.SuppressWarnings({"ReferenceEquality"})
  private void mergeExpectCompressed(com.grpc.testing.BoolValue value) {
    value.getClass();
  if (expectCompressed_ != null &&
        expectCompressed_ != com.grpc.testing.BoolValue.getDefaultInstance()) {
      expectCompressed_ =
        com.grpc.testing.BoolValue.newBuilder(expectCompressed_).mergeFrom(value).buildPartial();
    } else {
      expectCompressed_ = value;
    }
    
  }
  /**
   * <pre>
   * Whether the server should expect this request to be compressed. This field
   * is "nullable" in order to interoperate seamlessly with servers not able to
   * implement the full compression tests by introspecting the call to verify
   * the request's compression status.
   * </pre>
   *
   * <code>.grpc.testing.BoolValue expect_compressed = 2 [json_name = "expectCompressed"];</code>
   */
  private void clearExpectCompressed() {  expectCompressed_ = null;
    
  }

  public static com.grpc.testing.StreamingInputCallRequest parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static com.grpc.testing.StreamingInputCallRequest parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static com.grpc.testing.StreamingInputCallRequest parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static com.grpc.testing.StreamingInputCallRequest parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static com.grpc.testing.StreamingInputCallRequest parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static com.grpc.testing.StreamingInputCallRequest parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static com.grpc.testing.StreamingInputCallRequest parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static com.grpc.testing.StreamingInputCallRequest parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static com.grpc.testing.StreamingInputCallRequest parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }
  public static com.grpc.testing.StreamingInputCallRequest parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static com.grpc.testing.StreamingInputCallRequest parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static com.grpc.testing.StreamingInputCallRequest parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return (Builder) DEFAULT_INSTANCE.createBuilder();
  }
  public static Builder newBuilder(com.grpc.testing.StreamingInputCallRequest prototype) {
    return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
  }

  /**
   * <pre>
   * Client-streaming request.
   * </pre>
   *
   * Protobuf type {@code grpc.testing.StreamingInputCallRequest}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageLite.Builder<
        com.grpc.testing.StreamingInputCallRequest, Builder> implements
      // @@protoc_insertion_point(builder_implements:grpc.testing.StreamingInputCallRequest)
      com.grpc.testing.StreamingInputCallRequestOrBuilder {
    // Construct using com.grpc.testing.StreamingInputCallRequest.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }


    /**
     * <pre>
     * Optional input payload sent along with the request.
     * </pre>
     *
     * <code>.grpc.testing.Payload payload = 1 [json_name = "payload"];</code>
     */
    @java.lang.Override
    public boolean hasPayload() {
      return instance.hasPayload();
    }
    /**
     * <pre>
     * Optional input payload sent along with the request.
     * </pre>
     *
     * <code>.grpc.testing.Payload payload = 1 [json_name = "payload"];</code>
     */
    @java.lang.Override
    public com.grpc.testing.Payload getPayload() {
      return instance.getPayload();
    }
    /**
     * <pre>
     * Optional input payload sent along with the request.
     * </pre>
     *
     * <code>.grpc.testing.Payload payload = 1 [json_name = "payload"];</code>
     */
    public Builder setPayload(com.grpc.testing.Payload value) {
      copyOnWrite();
      instance.setPayload(value);
      return this;
      }
    /**
     * <pre>
     * Optional input payload sent along with the request.
     * </pre>
     *
     * <code>.grpc.testing.Payload payload = 1 [json_name = "payload"];</code>
     */
    public Builder setPayload(
        com.grpc.testing.Payload.Builder builderForValue) {
      copyOnWrite();
      instance.setPayload(builderForValue.build());
      return this;
    }
    /**
     * <pre>
     * Optional input payload sent along with the request.
     * </pre>
     *
     * <code>.grpc.testing.Payload payload = 1 [json_name = "payload"];</code>
     */
    public Builder mergePayload(com.grpc.testing.Payload value) {
      copyOnWrite();
      instance.mergePayload(value);
      return this;
    }
    /**
     * <pre>
     * Optional input payload sent along with the request.
     * </pre>
     *
     * <code>.grpc.testing.Payload payload = 1 [json_name = "payload"];</code>
     */
    public Builder clearPayload() {  copyOnWrite();
      instance.clearPayload();
      return this;
    }

    /**
     * <pre>
     * Whether the server should expect this request to be compressed. This field
     * is "nullable" in order to interoperate seamlessly with servers not able to
     * implement the full compression tests by introspecting the call to verify
     * the request's compression status.
     * </pre>
     *
     * <code>.grpc.testing.BoolValue expect_compressed = 2 [json_name = "expectCompressed"];</code>
     */
    @java.lang.Override
    public boolean hasExpectCompressed() {
      return instance.hasExpectCompressed();
    }
    /**
     * <pre>
     * Whether the server should expect this request to be compressed. This field
     * is "nullable" in order to interoperate seamlessly with servers not able to
     * implement the full compression tests by introspecting the call to verify
     * the request's compression status.
     * </pre>
     *
     * <code>.grpc.testing.BoolValue expect_compressed = 2 [json_name = "expectCompressed"];</code>
     */
    @java.lang.Override
    public com.grpc.testing.BoolValue getExpectCompressed() {
      return instance.getExpectCompressed();
    }
    /**
     * <pre>
     * Whether the server should expect this request to be compressed. This field
     * is "nullable" in order to interoperate seamlessly with servers not able to
     * implement the full compression tests by introspecting the call to verify
     * the request's compression status.
     * </pre>
     *
     * <code>.grpc.testing.BoolValue expect_compressed = 2 [json_name = "expectCompressed"];</code>
     */
    public Builder setExpectCompressed(com.grpc.testing.BoolValue value) {
      copyOnWrite();
      instance.setExpectCompressed(value);
      return this;
      }
    /**
     * <pre>
     * Whether the server should expect this request to be compressed. This field
     * is "nullable" in order to interoperate seamlessly with servers not able to
     * implement the full compression tests by introspecting the call to verify
     * the request's compression status.
     * </pre>
     *
     * <code>.grpc.testing.BoolValue expect_compressed = 2 [json_name = "expectCompressed"];</code>
     */
    public Builder setExpectCompressed(
        com.grpc.testing.BoolValue.Builder builderForValue) {
      copyOnWrite();
      instance.setExpectCompressed(builderForValue.build());
      return this;
    }
    /**
     * <pre>
     * Whether the server should expect this request to be compressed. This field
     * is "nullable" in order to interoperate seamlessly with servers not able to
     * implement the full compression tests by introspecting the call to verify
     * the request's compression status.
     * </pre>
     *
     * <code>.grpc.testing.BoolValue expect_compressed = 2 [json_name = "expectCompressed"];</code>
     */
    public Builder mergeExpectCompressed(com.grpc.testing.BoolValue value) {
      copyOnWrite();
      instance.mergeExpectCompressed(value);
      return this;
    }
    /**
     * <pre>
     * Whether the server should expect this request to be compressed. This field
     * is "nullable" in order to interoperate seamlessly with servers not able to
     * implement the full compression tests by introspecting the call to verify
     * the request's compression status.
     * </pre>
     *
     * <code>.grpc.testing.BoolValue expect_compressed = 2 [json_name = "expectCompressed"];</code>
     */
    public Builder clearExpectCompressed() {  copyOnWrite();
      instance.clearExpectCompressed();
      return this;
    }

    // @@protoc_insertion_point(builder_scope:grpc.testing.StreamingInputCallRequest)
  }
  @java.lang.Override
  @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
  protected final java.lang.Object dynamicMethod(
      com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
      java.lang.Object arg0, java.lang.Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE: {
        return new com.grpc.testing.StreamingInputCallRequest();
      }
      case NEW_BUILDER: {
        return new Builder();
      }
      case BUILD_MESSAGE_INFO: {
          java.lang.Object[] objects = new java.lang.Object[] {
            "payload_",
            "expectCompressed_",
          };
          java.lang.String info =
              "\u0000\u0002\u0000\u0000\u0001\u0002\u0002\u0000\u0000\u0000\u0001\t\u0002\t";
          return newMessageInfo(DEFAULT_INSTANCE, info, objects);
      }
      // fall through
      case GET_DEFAULT_INSTANCE: {
        return DEFAULT_INSTANCE;
      }
      case GET_PARSER: {
        com.google.protobuf.Parser<com.grpc.testing.StreamingInputCallRequest> parser = PARSER;
        if (parser == null) {
          synchronized (com.grpc.testing.StreamingInputCallRequest.class) {
            parser = PARSER;
            if (parser == null) {
              parser =
                  new DefaultInstanceBasedParser<com.grpc.testing.StreamingInputCallRequest>(
                      DEFAULT_INSTANCE);
              PARSER = parser;
            }
          }
        }
        return parser;
    }
    case GET_MEMOIZED_IS_INITIALIZED: {
      return (byte) 1;
    }
    case SET_MEMOIZED_IS_INITIALIZED: {
      return null;
    }
    }
    throw new UnsupportedOperationException();
  }


  // @@protoc_insertion_point(class_scope:grpc.testing.StreamingInputCallRequest)
  private static final com.grpc.testing.StreamingInputCallRequest DEFAULT_INSTANCE;
  static {
    StreamingInputCallRequest defaultInstance = new StreamingInputCallRequest();
    // New instances are implicitly immutable so no need to make
    // immutable.
    DEFAULT_INSTANCE = defaultInstance;
    com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
      StreamingInputCallRequest.class, defaultInstance);
  }

  public static com.grpc.testing.StreamingInputCallRequest getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile com.google.protobuf.Parser<StreamingInputCallRequest> PARSER;

  public static com.google.protobuf.Parser<StreamingInputCallRequest> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}

