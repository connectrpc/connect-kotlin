// Copyright 2022-2023 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: grpc/testing/messages.proto

package com.grpc.testing;

@kotlin.jvm.JvmName("-initializeloadBalancerStatsResponse")
public inline fun loadBalancerStatsResponse(block: com.grpc.testing.LoadBalancerStatsResponseKt.Dsl.() -> kotlin.Unit): com.grpc.testing.LoadBalancerStatsResponse =
  com.grpc.testing.LoadBalancerStatsResponseKt.Dsl._create(com.grpc.testing.LoadBalancerStatsResponse.newBuilder()).apply { block() }._build()
public object LoadBalancerStatsResponseKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: com.grpc.testing.LoadBalancerStatsResponse.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: com.grpc.testing.LoadBalancerStatsResponse.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): com.grpc.testing.LoadBalancerStatsResponse = _builder.build()

    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    public class RpcsByPeerProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * <pre>
     * The number of completed RPCs for each peer.
     * </pre>
     *
     * <code>map&lt;string, int32&gt; rpcs_by_peer = 1 [json_name = "rpcsByPeer"];</code>
     */
     public val rpcsByPeer: com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.Int, RpcsByPeerProxy>
      @kotlin.jvm.JvmSynthetic
      @JvmName("getRpcsByPeerMap")
      get() = com.google.protobuf.kotlin.DslMap(
        _builder.getRpcsByPeerMap()
      )
    /**
     * <pre>
     * The number of completed RPCs for each peer.
     * </pre>
     *
     * <code>map&lt;string, int32&gt; rpcs_by_peer = 1 [json_name = "rpcsByPeer"];</code>
     */
    @JvmName("putRpcsByPeer")
    public fun com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.Int, RpcsByPeerProxy>
      .put(key: kotlin.String, value: kotlin.Int) {
         _builder.putRpcsByPeer(key, value)
       }
    /**
     * <pre>
     * The number of completed RPCs for each peer.
     * </pre>
     *
     * <code>map&lt;string, int32&gt; rpcs_by_peer = 1 [json_name = "rpcsByPeer"];</code>
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("setRpcsByPeer")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.Int, RpcsByPeerProxy>
      .set(key: kotlin.String, value: kotlin.Int) {
         put(key, value)
       }
    /**
     * <pre>
     * The number of completed RPCs for each peer.
     * </pre>
     *
     * <code>map&lt;string, int32&gt; rpcs_by_peer = 1 [json_name = "rpcsByPeer"];</code>
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("removeRpcsByPeer")
    public fun com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.Int, RpcsByPeerProxy>
      .remove(key: kotlin.String) {
         _builder.removeRpcsByPeer(key)
       }
    /**
     * <pre>
     * The number of completed RPCs for each peer.
     * </pre>
     *
     * <code>map&lt;string, int32&gt; rpcs_by_peer = 1 [json_name = "rpcsByPeer"];</code>
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("putAllRpcsByPeer")
    public fun com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.Int, RpcsByPeerProxy>
      .putAll(map: kotlin.collections.Map<kotlin.String, kotlin.Int>) {
         _builder.putAllRpcsByPeer(map)
       }
    /**
     * <pre>
     * The number of completed RPCs for each peer.
     * </pre>
     *
     * <code>map&lt;string, int32&gt; rpcs_by_peer = 1 [json_name = "rpcsByPeer"];</code>
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("clearRpcsByPeer")
    public fun com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.Int, RpcsByPeerProxy>
      .clear() {
         _builder.clearRpcsByPeer()
       }

    /**
     * <pre>
     * The number of RPCs that failed to record a remote peer.
     * </pre>
     *
     * <code>int32 num_failures = 2 [json_name = "numFailures"];</code>
     */
    public var numFailures: kotlin.Int
      @JvmName("getNumFailures")
      get() = _builder.getNumFailures()
      @JvmName("setNumFailures")
      set(value) {
        _builder.setNumFailures(value)
      }
    /**
     * <pre>
     * The number of RPCs that failed to record a remote peer.
     * </pre>
     *
     * <code>int32 num_failures = 2 [json_name = "numFailures"];</code>
     */
    public fun clearNumFailures() {
      _builder.clearNumFailures()
    }

    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    public class RpcsByMethodProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * <code>map&lt;string, .grpc.testing.LoadBalancerStatsResponse.RpcsByPeer&gt; rpcs_by_method = 3 [json_name = "rpcsByMethod"];</code>
     */
     public val rpcsByMethod: com.google.protobuf.kotlin.DslMap<kotlin.String, com.grpc.testing.LoadBalancerStatsResponse.RpcsByPeer, RpcsByMethodProxy>
      @kotlin.jvm.JvmSynthetic
      @JvmName("getRpcsByMethodMap")
      get() = com.google.protobuf.kotlin.DslMap(
        _builder.getRpcsByMethodMap()
      )
    /**
     * <code>map&lt;string, .grpc.testing.LoadBalancerStatsResponse.RpcsByPeer&gt; rpcs_by_method = 3 [json_name = "rpcsByMethod"];</code>
     */
    @JvmName("putRpcsByMethod")
    public fun com.google.protobuf.kotlin.DslMap<kotlin.String, com.grpc.testing.LoadBalancerStatsResponse.RpcsByPeer, RpcsByMethodProxy>
      .put(key: kotlin.String, value: com.grpc.testing.LoadBalancerStatsResponse.RpcsByPeer) {
         _builder.putRpcsByMethod(key, value)
       }
    /**
     * <code>map&lt;string, .grpc.testing.LoadBalancerStatsResponse.RpcsByPeer&gt; rpcs_by_method = 3 [json_name = "rpcsByMethod"];</code>
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("setRpcsByMethod")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslMap<kotlin.String, com.grpc.testing.LoadBalancerStatsResponse.RpcsByPeer, RpcsByMethodProxy>
      .set(key: kotlin.String, value: com.grpc.testing.LoadBalancerStatsResponse.RpcsByPeer) {
         put(key, value)
       }
    /**
     * <code>map&lt;string, .grpc.testing.LoadBalancerStatsResponse.RpcsByPeer&gt; rpcs_by_method = 3 [json_name = "rpcsByMethod"];</code>
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("removeRpcsByMethod")
    public fun com.google.protobuf.kotlin.DslMap<kotlin.String, com.grpc.testing.LoadBalancerStatsResponse.RpcsByPeer, RpcsByMethodProxy>
      .remove(key: kotlin.String) {
         _builder.removeRpcsByMethod(key)
       }
    /**
     * <code>map&lt;string, .grpc.testing.LoadBalancerStatsResponse.RpcsByPeer&gt; rpcs_by_method = 3 [json_name = "rpcsByMethod"];</code>
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("putAllRpcsByMethod")
    public fun com.google.protobuf.kotlin.DslMap<kotlin.String, com.grpc.testing.LoadBalancerStatsResponse.RpcsByPeer, RpcsByMethodProxy>
      .putAll(map: kotlin.collections.Map<kotlin.String, com.grpc.testing.LoadBalancerStatsResponse.RpcsByPeer>) {
         _builder.putAllRpcsByMethod(map)
       }
    /**
     * <code>map&lt;string, .grpc.testing.LoadBalancerStatsResponse.RpcsByPeer&gt; rpcs_by_method = 3 [json_name = "rpcsByMethod"];</code>
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("clearRpcsByMethod")
    public fun com.google.protobuf.kotlin.DslMap<kotlin.String, com.grpc.testing.LoadBalancerStatsResponse.RpcsByPeer, RpcsByMethodProxy>
      .clear() {
         _builder.clearRpcsByMethod()
       }
  }
  @kotlin.jvm.JvmName("-initializerpcsByPeer")
  public inline fun rpcsByPeer(block: com.grpc.testing.LoadBalancerStatsResponseKt.RpcsByPeerKt.Dsl.() -> kotlin.Unit): com.grpc.testing.LoadBalancerStatsResponse.RpcsByPeer =
    com.grpc.testing.LoadBalancerStatsResponseKt.RpcsByPeerKt.Dsl._create(com.grpc.testing.LoadBalancerStatsResponse.RpcsByPeer.newBuilder()).apply { block() }._build()
  public object RpcsByPeerKt {
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    @com.google.protobuf.kotlin.ProtoDslMarker
    public class Dsl private constructor(
      private val _builder: com.grpc.testing.LoadBalancerStatsResponse.RpcsByPeer.Builder
    ) {
      public companion object {
        @kotlin.jvm.JvmSynthetic
        @kotlin.PublishedApi
        internal fun _create(builder: com.grpc.testing.LoadBalancerStatsResponse.RpcsByPeer.Builder): Dsl = Dsl(builder)
      }

      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _build(): com.grpc.testing.LoadBalancerStatsResponse.RpcsByPeer = _builder.build()

      /**
       * An uninstantiable, behaviorless type to represent the field in
       * generics.
       */
      @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
      public class RpcsByPeerProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
      /**
       * <pre>
       * The number of completed RPCs for each peer.
       * </pre>
       *
       * <code>map&lt;string, int32&gt; rpcs_by_peer = 1 [json_name = "rpcsByPeer"];</code>
       */
       public val rpcsByPeer: com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.Int, RpcsByPeerProxy>
        @kotlin.jvm.JvmSynthetic
        @JvmName("getRpcsByPeerMap")
        get() = com.google.protobuf.kotlin.DslMap(
          _builder.getRpcsByPeerMap()
        )
      /**
       * <pre>
       * The number of completed RPCs for each peer.
       * </pre>
       *
       * <code>map&lt;string, int32&gt; rpcs_by_peer = 1 [json_name = "rpcsByPeer"];</code>
       */
      @JvmName("putRpcsByPeer")
      public fun com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.Int, RpcsByPeerProxy>
        .put(key: kotlin.String, value: kotlin.Int) {
           _builder.putRpcsByPeer(key, value)
         }
      /**
       * <pre>
       * The number of completed RPCs for each peer.
       * </pre>
       *
       * <code>map&lt;string, int32&gt; rpcs_by_peer = 1 [json_name = "rpcsByPeer"];</code>
       */
      @kotlin.jvm.JvmSynthetic
      @JvmName("setRpcsByPeer")
      @Suppress("NOTHING_TO_INLINE")
      public inline operator fun com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.Int, RpcsByPeerProxy>
        .set(key: kotlin.String, value: kotlin.Int) {
           put(key, value)
         }
      /**
       * <pre>
       * The number of completed RPCs for each peer.
       * </pre>
       *
       * <code>map&lt;string, int32&gt; rpcs_by_peer = 1 [json_name = "rpcsByPeer"];</code>
       */
      @kotlin.jvm.JvmSynthetic
      @JvmName("removeRpcsByPeer")
      public fun com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.Int, RpcsByPeerProxy>
        .remove(key: kotlin.String) {
           _builder.removeRpcsByPeer(key)
         }
      /**
       * <pre>
       * The number of completed RPCs for each peer.
       * </pre>
       *
       * <code>map&lt;string, int32&gt; rpcs_by_peer = 1 [json_name = "rpcsByPeer"];</code>
       */
      @kotlin.jvm.JvmSynthetic
      @JvmName("putAllRpcsByPeer")
      public fun com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.Int, RpcsByPeerProxy>
        .putAll(map: kotlin.collections.Map<kotlin.String, kotlin.Int>) {
           _builder.putAllRpcsByPeer(map)
         }
      /**
       * <pre>
       * The number of completed RPCs for each peer.
       * </pre>
       *
       * <code>map&lt;string, int32&gt; rpcs_by_peer = 1 [json_name = "rpcsByPeer"];</code>
       */
      @kotlin.jvm.JvmSynthetic
      @JvmName("clearRpcsByPeer")
      public fun com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.Int, RpcsByPeerProxy>
        .clear() {
           _builder.clearRpcsByPeer()
         }
    }
  }
}
public inline fun com.grpc.testing.LoadBalancerStatsResponse.copy(block: com.grpc.testing.LoadBalancerStatsResponseKt.Dsl.() -> kotlin.Unit): com.grpc.testing.LoadBalancerStatsResponse =
  com.grpc.testing.LoadBalancerStatsResponseKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public inline fun com.grpc.testing.LoadBalancerStatsResponse.RpcsByPeer.copy(block: com.grpc.testing.LoadBalancerStatsResponseKt.RpcsByPeerKt.Dsl.() -> kotlin.Unit): com.grpc.testing.LoadBalancerStatsResponse.RpcsByPeer =
  com.grpc.testing.LoadBalancerStatsResponseKt.RpcsByPeerKt.Dsl._create(this.toBuilder()).apply { block() }._build()

