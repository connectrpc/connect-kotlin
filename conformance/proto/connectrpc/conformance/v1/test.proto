// Copyright 2022-2023 The Connect Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// This is copied from gRPC's testing Protobuf definitions: https://github.com/grpc/grpc/blob/master/src/proto/grpc/testing/test.proto
//
// The TestService has been extended to include the following RPCs:
// FailUnaryCall(SimpleRequest) returns (SimpleResponse): this RPC is a unary
// call that always returns a readable non-ASCII error with error details.
// FailStreamingOutputCall(StreamingOutputCallRequest) returns (stream StreamingOutputCallResponse):
// this RPC is a server streaming call that always returns a readable non-ASCII error with error details.
// UnimplementedStreamingOutputCall(google.protobuf.Empty) returns (stream google.protobuf.Empty): this RPC
// is a server streaming call that will not be implemented.
//
// The UnimplementedService has been extended to include the following RPCs:
// UnimplementedStreamingOutputCall(google.protobuf.Empty) returns (stream google.protobuf.Empty): this RPC
// is a server streaming call that will not be implemented.

// Copyright 2015-2016 gRPC authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// An integration test service that covers all the method signature permutations
// of unary/streaming requests/responses.

syntax = "proto3";

package connectrpc.conformance.v1;

import "connectrpc/conformance/v1/messages.proto";
import "google/protobuf/empty.proto";

// A simple service to test the various types of RPCs and experiment with
// performance with various types of payload.
service TestService {
  // One empty request followed by one empty response.
  rpc EmptyCall(google.protobuf.Empty) returns (google.protobuf.Empty);

  // One request followed by one response.
  rpc UnaryCall(SimpleRequest) returns (SimpleResponse);

  // One request followed by one response. This RPC always fails.
  rpc FailUnaryCall(SimpleRequest) returns (SimpleResponse);

  // One request followed by one response. Response has cache control
  // headers set such that a caching HTTP proxy (such as GFE) can
  // satisfy subsequent requests.
  rpc CacheableUnaryCall(SimpleRequest) returns (SimpleResponse) {
    option idempotency_level = NO_SIDE_EFFECTS;
  }

  // One request followed by a sequence of responses (streamed download).
  // The server returns the payload with client desired type and sizes.
  rpc StreamingOutputCall(StreamingOutputCallRequest) returns (stream StreamingOutputCallResponse);

  // One request followed by a sequence of responses (streamed download).
  // The server returns the payload with client desired type and sizes.
  // This RPC always responds with an error status.
  rpc FailStreamingOutputCall(StreamingOutputCallRequest) returns (stream StreamingOutputCallResponse);

  // A sequence of requests followed by one response (streamed upload).
  // The server returns the aggregated size of client payload as the result.
  rpc StreamingInputCall(stream StreamingInputCallRequest) returns (StreamingInputCallResponse);

  // A sequence of requests with each request served by the server immediately.
  // As one request could lead to multiple responses, this interface
  // demonstrates the idea of full duplexing.
  rpc FullDuplexCall(stream StreamingOutputCallRequest) returns (stream StreamingOutputCallResponse);

  // A sequence of requests followed by a sequence of responses.
  // The server buffers all the client requests and then serves them in order. A
  // stream of responses are returned to the client when the server starts with
  // first request.
  rpc HalfDuplexCall(stream StreamingOutputCallRequest) returns (stream StreamingOutputCallResponse);

  // The test server will not implement this method. It will be used
  // to test the behavior when clients call unimplemented methods.
  rpc UnimplementedCall(google.protobuf.Empty) returns (google.protobuf.Empty);

  // The test server will not implement this method. It will be used
  // to test the behavior when clients call unimplemented streaming output methods.
  rpc UnimplementedStreamingOutputCall(google.protobuf.Empty) returns (stream google.protobuf.Empty);
}

// A simple service NOT implemented at servers so clients can test for
// that case.
service UnimplementedService {
  // A call that no server should implement
  rpc UnimplementedCall(google.protobuf.Empty) returns (google.protobuf.Empty);

  // A call that no server should implement
  rpc UnimplementedStreamingOutputCall(google.protobuf.Empty) returns (stream google.protobuf.Empty);
}

// A service used to control reconnect server.
service ReconnectService {
  rpc Start(ReconnectParams) returns (google.protobuf.Empty);
  rpc Stop(google.protobuf.Empty) returns (ReconnectInfo);
}

// A service used to obtain stats for verifying LB behavior.
service LoadBalancerStatsService {
  // Gets the backend distribution for RPCs sent by a test client.
  rpc GetClientStats(LoadBalancerStatsRequest) returns (LoadBalancerStatsResponse) {}

  // Gets the accumulated stats for RPCs sent by a test client.
  rpc GetClientAccumulatedStats(LoadBalancerAccumulatedStatsRequest) returns (LoadBalancerAccumulatedStatsResponse) {}
}

// A service to remotely control health status of an xDS test server.
service XdsUpdateHealthService {
  rpc SetServing(google.protobuf.Empty) returns (google.protobuf.Empty);
  rpc SetNotServing(google.protobuf.Empty) returns (google.protobuf.Empty);
}

// A service to dynamically update the configuration of an xDS test client.
service XdsUpdateClientConfigureService {
  // Update the tes client's configuration.
  rpc Configure(ClientConfigureRequest) returns (ClientConfigureResponse);
}
