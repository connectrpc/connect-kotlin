// Copyright 2022-2023 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: no_package.proto

@kotlin.jvm.JvmName("-initializesayResponse")
public inline fun sayResponse(block: SayResponseKt.Dsl.() -> kotlin.Unit): SayResponse =
  SayResponseKt.Dsl._create(SayResponse.newBuilder()).apply { block() }._build()
public object SayResponseKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: SayResponse.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: SayResponse.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): SayResponse = _builder.build()

    /**
     * <code>string sentence = 1 [json_name = "sentence"];</code>
     */
    public var sentence: kotlin.String
      @JvmName("getSentence")
      get() = _builder.getSentence()
      @JvmName("setSentence")
      set(value) {
        _builder.setSentence(value)
      }
    /**
     * <code>string sentence = 1 [json_name = "sentence"];</code>
     */
    public fun clearSentence() {
      _builder.clearSentence()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun SayResponse.copy(block: SayResponseKt.Dsl.() -> kotlin.Unit): SayResponse =
  SayResponseKt.Dsl._create(this.toBuilder()).apply { block() }._build()

