// Copyright 2022-2023 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: grpc/testing/messages.proto

package com.grpc.testing;

@kotlin.jvm.JvmName("-initializestreamingInputCallRequest")
public inline fun streamingInputCallRequest(block: com.grpc.testing.StreamingInputCallRequestKt.Dsl.() -> kotlin.Unit): com.grpc.testing.StreamingInputCallRequest =
  com.grpc.testing.StreamingInputCallRequestKt.Dsl._create(com.grpc.testing.StreamingInputCallRequest.newBuilder()).apply { block() }._build()
public object StreamingInputCallRequestKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: com.grpc.testing.StreamingInputCallRequest.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: com.grpc.testing.StreamingInputCallRequest.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): com.grpc.testing.StreamingInputCallRequest = _builder.build()

    /**
     * <pre>
     * Optional input payload sent along with the request.
     * </pre>
     *
     * <code>.grpc.testing.Payload payload = 1 [json_name = "payload"];</code>
     */
    public var payload: com.grpc.testing.Payload
      @JvmName("getPayload")
      get() = _builder.getPayload()
      @JvmName("setPayload")
      set(value) {
        _builder.setPayload(value)
      }
    /**
     * <pre>
     * Optional input payload sent along with the request.
     * </pre>
     *
     * <code>.grpc.testing.Payload payload = 1 [json_name = "payload"];</code>
     */
    public fun clearPayload() {
      _builder.clearPayload()
    }
    /**
     * <pre>
     * Optional input payload sent along with the request.
     * </pre>
     *
     * <code>.grpc.testing.Payload payload = 1 [json_name = "payload"];</code>
     * @return Whether the payload field is set.
     */
    public fun hasPayload(): kotlin.Boolean {
      return _builder.hasPayload()
    }

    /**
     * <pre>
     * Whether the server should expect this request to be compressed. This field
     * is "nullable" in order to interoperate seamlessly with servers not able to
     * implement the full compression tests by introspecting the call to verify
     * the request's compression status.
     * </pre>
     *
     * <code>.grpc.testing.BoolValue expect_compressed = 2 [json_name = "expectCompressed"];</code>
     */
    public var expectCompressed: com.grpc.testing.BoolValue
      @JvmName("getExpectCompressed")
      get() = _builder.getExpectCompressed()
      @JvmName("setExpectCompressed")
      set(value) {
        _builder.setExpectCompressed(value)
      }
    /**
     * <pre>
     * Whether the server should expect this request to be compressed. This field
     * is "nullable" in order to interoperate seamlessly with servers not able to
     * implement the full compression tests by introspecting the call to verify
     * the request's compression status.
     * </pre>
     *
     * <code>.grpc.testing.BoolValue expect_compressed = 2 [json_name = "expectCompressed"];</code>
     */
    public fun clearExpectCompressed() {
      _builder.clearExpectCompressed()
    }
    /**
     * <pre>
     * Whether the server should expect this request to be compressed. This field
     * is "nullable" in order to interoperate seamlessly with servers not able to
     * implement the full compression tests by introspecting the call to verify
     * the request's compression status.
     * </pre>
     *
     * <code>.grpc.testing.BoolValue expect_compressed = 2 [json_name = "expectCompressed"];</code>
     * @return Whether the expectCompressed field is set.
     */
    public fun hasExpectCompressed(): kotlin.Boolean {
      return _builder.hasExpectCompressed()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun com.grpc.testing.StreamingInputCallRequest.copy(block: com.grpc.testing.StreamingInputCallRequestKt.Dsl.() -> kotlin.Unit): com.grpc.testing.StreamingInputCallRequest =
  com.grpc.testing.StreamingInputCallRequestKt.Dsl._create(this.toBuilder()).apply { block() }._build()

val com.grpc.testing.StreamingInputCallRequestOrBuilder.payloadOrNull: com.grpc.testing.Payload?
  get() = if (hasPayload()) getPayload() else null

val com.grpc.testing.StreamingInputCallRequestOrBuilder.expectCompressedOrNull: com.grpc.testing.BoolValue?
  get() = if (hasExpectCompressed()) getExpectCompressed() else null

