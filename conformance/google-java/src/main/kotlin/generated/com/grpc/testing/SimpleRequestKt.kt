// Copyright 2022-2023 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: grpc/testing/messages.proto

package com.grpc.testing;

@kotlin.jvm.JvmName("-initializesimpleRequest")
public inline fun simpleRequest(block: com.grpc.testing.SimpleRequestKt.Dsl.() -> kotlin.Unit): com.grpc.testing.SimpleRequest =
  com.grpc.testing.SimpleRequestKt.Dsl._create(com.grpc.testing.SimpleRequest.newBuilder()).apply { block() }._build()
public object SimpleRequestKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: com.grpc.testing.SimpleRequest.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: com.grpc.testing.SimpleRequest.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): com.grpc.testing.SimpleRequest = _builder.build()

    /**
     * <pre>
     * Desired payload type in the response from the server.
     * If response_type is RANDOM, server randomly chooses one from other formats.
     * </pre>
     *
     * <code>.grpc.testing.PayloadType response_type = 1 [json_name = "responseType"];</code>
     */
    public var responseType: com.grpc.testing.PayloadType
      @JvmName("getResponseType")
      get() = _builder.getResponseType()
      @JvmName("setResponseType")
      set(value) {
        _builder.setResponseType(value)
      }
    /**
     * <pre>
     * Desired payload type in the response from the server.
     * If response_type is RANDOM, server randomly chooses one from other formats.
     * </pre>
     *
     * <code>.grpc.testing.PayloadType response_type = 1 [json_name = "responseType"];</code>
     */
    public fun clearResponseType() {
      _builder.clearResponseType()
    }

    /**
     * <pre>
     * Desired payload size in the response from the server.
     * </pre>
     *
     * <code>int32 response_size = 2 [json_name = "responseSize"];</code>
     */
    public var responseSize: kotlin.Int
      @JvmName("getResponseSize")
      get() = _builder.getResponseSize()
      @JvmName("setResponseSize")
      set(value) {
        _builder.setResponseSize(value)
      }
    /**
     * <pre>
     * Desired payload size in the response from the server.
     * </pre>
     *
     * <code>int32 response_size = 2 [json_name = "responseSize"];</code>
     */
    public fun clearResponseSize() {
      _builder.clearResponseSize()
    }

    /**
     * <pre>
     * Optional input payload sent along with the request.
     * </pre>
     *
     * <code>.grpc.testing.Payload payload = 3 [json_name = "payload"];</code>
     */
    public var payload: com.grpc.testing.Payload
      @JvmName("getPayload")
      get() = _builder.getPayload()
      @JvmName("setPayload")
      set(value) {
        _builder.setPayload(value)
      }
    /**
     * <pre>
     * Optional input payload sent along with the request.
     * </pre>
     *
     * <code>.grpc.testing.Payload payload = 3 [json_name = "payload"];</code>
     */
    public fun clearPayload() {
      _builder.clearPayload()
    }
    /**
     * <pre>
     * Optional input payload sent along with the request.
     * </pre>
     *
     * <code>.grpc.testing.Payload payload = 3 [json_name = "payload"];</code>
     * @return Whether the payload field is set.
     */
    public fun hasPayload(): kotlin.Boolean {
      return _builder.hasPayload()
    }

    /**
     * <pre>
     * Whether SimpleResponse should include username.
     * </pre>
     *
     * <code>bool fill_username = 4 [json_name = "fillUsername"];</code>
     */
    public var fillUsername: kotlin.Boolean
      @JvmName("getFillUsername")
      get() = _builder.getFillUsername()
      @JvmName("setFillUsername")
      set(value) {
        _builder.setFillUsername(value)
      }
    /**
     * <pre>
     * Whether SimpleResponse should include username.
     * </pre>
     *
     * <code>bool fill_username = 4 [json_name = "fillUsername"];</code>
     */
    public fun clearFillUsername() {
      _builder.clearFillUsername()
    }

    /**
     * <pre>
     * Whether SimpleResponse should include OAuth scope.
     * </pre>
     *
     * <code>bool fill_oauth_scope = 5 [json_name = "fillOauthScope"];</code>
     */
    public var fillOauthScope: kotlin.Boolean
      @JvmName("getFillOauthScope")
      get() = _builder.getFillOauthScope()
      @JvmName("setFillOauthScope")
      set(value) {
        _builder.setFillOauthScope(value)
      }
    /**
     * <pre>
     * Whether SimpleResponse should include OAuth scope.
     * </pre>
     *
     * <code>bool fill_oauth_scope = 5 [json_name = "fillOauthScope"];</code>
     */
    public fun clearFillOauthScope() {
      _builder.clearFillOauthScope()
    }

    /**
     * <pre>
     * Whether to request the server to compress the response. This field is
     * "nullable" in order to interoperate seamlessly with clients not able to
     * implement the full compression tests by introspecting the call to verify
     * the response's compression status.
     * </pre>
     *
     * <code>.grpc.testing.BoolValue response_compressed = 6 [json_name = "responseCompressed"];</code>
     */
    public var responseCompressed: com.grpc.testing.BoolValue
      @JvmName("getResponseCompressed")
      get() = _builder.getResponseCompressed()
      @JvmName("setResponseCompressed")
      set(value) {
        _builder.setResponseCompressed(value)
      }
    /**
     * <pre>
     * Whether to request the server to compress the response. This field is
     * "nullable" in order to interoperate seamlessly with clients not able to
     * implement the full compression tests by introspecting the call to verify
     * the response's compression status.
     * </pre>
     *
     * <code>.grpc.testing.BoolValue response_compressed = 6 [json_name = "responseCompressed"];</code>
     */
    public fun clearResponseCompressed() {
      _builder.clearResponseCompressed()
    }
    /**
     * <pre>
     * Whether to request the server to compress the response. This field is
     * "nullable" in order to interoperate seamlessly with clients not able to
     * implement the full compression tests by introspecting the call to verify
     * the response's compression status.
     * </pre>
     *
     * <code>.grpc.testing.BoolValue response_compressed = 6 [json_name = "responseCompressed"];</code>
     * @return Whether the responseCompressed field is set.
     */
    public fun hasResponseCompressed(): kotlin.Boolean {
      return _builder.hasResponseCompressed()
    }

    /**
     * <pre>
     * Whether server should return a given status
     * </pre>
     *
     * <code>.grpc.testing.EchoStatus response_status = 7 [json_name = "responseStatus"];</code>
     */
    public var responseStatus: com.grpc.testing.EchoStatus
      @JvmName("getResponseStatus")
      get() = _builder.getResponseStatus()
      @JvmName("setResponseStatus")
      set(value) {
        _builder.setResponseStatus(value)
      }
    /**
     * <pre>
     * Whether server should return a given status
     * </pre>
     *
     * <code>.grpc.testing.EchoStatus response_status = 7 [json_name = "responseStatus"];</code>
     */
    public fun clearResponseStatus() {
      _builder.clearResponseStatus()
    }
    /**
     * <pre>
     * Whether server should return a given status
     * </pre>
     *
     * <code>.grpc.testing.EchoStatus response_status = 7 [json_name = "responseStatus"];</code>
     * @return Whether the responseStatus field is set.
     */
    public fun hasResponseStatus(): kotlin.Boolean {
      return _builder.hasResponseStatus()
    }

    /**
     * <pre>
     * Whether the server should expect this request to be compressed.
     * </pre>
     *
     * <code>.grpc.testing.BoolValue expect_compressed = 8 [json_name = "expectCompressed"];</code>
     */
    public var expectCompressed: com.grpc.testing.BoolValue
      @JvmName("getExpectCompressed")
      get() = _builder.getExpectCompressed()
      @JvmName("setExpectCompressed")
      set(value) {
        _builder.setExpectCompressed(value)
      }
    /**
     * <pre>
     * Whether the server should expect this request to be compressed.
     * </pre>
     *
     * <code>.grpc.testing.BoolValue expect_compressed = 8 [json_name = "expectCompressed"];</code>
     */
    public fun clearExpectCompressed() {
      _builder.clearExpectCompressed()
    }
    /**
     * <pre>
     * Whether the server should expect this request to be compressed.
     * </pre>
     *
     * <code>.grpc.testing.BoolValue expect_compressed = 8 [json_name = "expectCompressed"];</code>
     * @return Whether the expectCompressed field is set.
     */
    public fun hasExpectCompressed(): kotlin.Boolean {
      return _builder.hasExpectCompressed()
    }

    /**
     * <pre>
     * Whether SimpleResponse should include server_id.
     * </pre>
     *
     * <code>bool fill_server_id = 9 [json_name = "fillServerId"];</code>
     */
    public var fillServerId: kotlin.Boolean
      @JvmName("getFillServerId")
      get() = _builder.getFillServerId()
      @JvmName("setFillServerId")
      set(value) {
        _builder.setFillServerId(value)
      }
    /**
     * <pre>
     * Whether SimpleResponse should include server_id.
     * </pre>
     *
     * <code>bool fill_server_id = 9 [json_name = "fillServerId"];</code>
     */
    public fun clearFillServerId() {
      _builder.clearFillServerId()
    }

    /**
     * <pre>
     * Whether SimpleResponse should include grpclb_route_type.
     * </pre>
     *
     * <code>bool fill_grpclb_route_type = 10 [json_name = "fillGrpclbRouteType"];</code>
     */
    public var fillGrpclbRouteType: kotlin.Boolean
      @JvmName("getFillGrpclbRouteType")
      get() = _builder.getFillGrpclbRouteType()
      @JvmName("setFillGrpclbRouteType")
      set(value) {
        _builder.setFillGrpclbRouteType(value)
      }
    /**
     * <pre>
     * Whether SimpleResponse should include grpclb_route_type.
     * </pre>
     *
     * <code>bool fill_grpclb_route_type = 10 [json_name = "fillGrpclbRouteType"];</code>
     */
    public fun clearFillGrpclbRouteType() {
      _builder.clearFillGrpclbRouteType()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun com.grpc.testing.SimpleRequest.copy(block: com.grpc.testing.SimpleRequestKt.Dsl.() -> kotlin.Unit): com.grpc.testing.SimpleRequest =
  com.grpc.testing.SimpleRequestKt.Dsl._create(this.toBuilder()).apply { block() }._build()

val com.grpc.testing.SimpleRequestOrBuilder.payloadOrNull: com.grpc.testing.Payload?
  get() = if (hasPayload()) getPayload() else null

val com.grpc.testing.SimpleRequestOrBuilder.responseCompressedOrNull: com.grpc.testing.BoolValue?
  get() = if (hasResponseCompressed()) getResponseCompressed() else null

val com.grpc.testing.SimpleRequestOrBuilder.responseStatusOrNull: com.grpc.testing.EchoStatus?
  get() = if (hasResponseStatus()) getResponseStatus() else null

val com.grpc.testing.SimpleRequestOrBuilder.expectCompressedOrNull: com.grpc.testing.BoolValue?
  get() = if (hasExpectCompressed()) getExpectCompressed() else null

