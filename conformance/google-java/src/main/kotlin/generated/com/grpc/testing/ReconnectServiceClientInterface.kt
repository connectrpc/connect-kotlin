// Copyright 2022-2023 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by connect-kotlin. DO NOT EDIT.
//
// Source: grpc/testing/test.proto
//
package com.grpc.testing

import build.buf.connect.Headers
import build.buf.connect.ResponseMessage
import build.buf.connect.UnaryBlockingCall
import build.buf.connect.http.Cancelable
import kotlin.Unit

/**
 *  A service used to control reconnect server.
 */
public interface ReconnectServiceClientInterface {
  public suspend fun start(request: ReconnectParams, headers: Headers = emptyMap()):
      ResponseMessage<Empty>

  public fun start(
    request: ReconnectParams,
    headers: Headers = emptyMap(),
    onResult: (ResponseMessage<Empty>) -> Unit,
  ): Cancelable

  public fun startBlocking(request: ReconnectParams, headers: Headers = emptyMap()):
      UnaryBlockingCall<Empty>

  public suspend fun stop(request: Empty, headers: Headers = emptyMap()):
      ResponseMessage<ReconnectInfo>

  public fun stop(
    request: Empty,
    headers: Headers = emptyMap(),
    onResult: (ResponseMessage<ReconnectInfo>) -> Unit,
  ): Cancelable

  public fun stopBlocking(request: Empty, headers: Headers = emptyMap()):
      UnaryBlockingCall<ReconnectInfo>
}
