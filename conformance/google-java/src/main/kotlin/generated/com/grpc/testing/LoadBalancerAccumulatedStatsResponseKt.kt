// Copyright 2022-2023 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: grpc/testing/messages.proto

package com.grpc.testing;

@kotlin.jvm.JvmName("-initializeloadBalancerAccumulatedStatsResponse")
public inline fun loadBalancerAccumulatedStatsResponse(block: com.grpc.testing.LoadBalancerAccumulatedStatsResponseKt.Dsl.() -> kotlin.Unit): com.grpc.testing.LoadBalancerAccumulatedStatsResponse =
  com.grpc.testing.LoadBalancerAccumulatedStatsResponseKt.Dsl._create(com.grpc.testing.LoadBalancerAccumulatedStatsResponse.newBuilder()).apply { block() }._build()
public object LoadBalancerAccumulatedStatsResponseKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: com.grpc.testing.LoadBalancerAccumulatedStatsResponse.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: com.grpc.testing.LoadBalancerAccumulatedStatsResponse.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): com.grpc.testing.LoadBalancerAccumulatedStatsResponse = _builder.build()

    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    public class NumRpcsStartedByMethodProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * <pre>
     * The total number of RPCs have ever issued for each type.
     * Deprecated: use stats_per_method.rpcs_started instead.
     * </pre>
     *
     * <code>map&lt;string, int32&gt; num_rpcs_started_by_method = 1 [json_name = "numRpcsStartedByMethod", deprecated = true];</code>
     */
    @kotlin.Deprecated(message = "Field numRpcsStartedByMethod is deprecated")  public val numRpcsStartedByMethod: com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.Int, NumRpcsStartedByMethodProxy>
      @kotlin.jvm.JvmSynthetic
      @JvmName("getNumRpcsStartedByMethodMap")
      get() = com.google.protobuf.kotlin.DslMap(
        _builder.getNumRpcsStartedByMethodMap()
      )
    /**
     * <pre>
     * The total number of RPCs have ever issued for each type.
     * Deprecated: use stats_per_method.rpcs_started instead.
     * </pre>
     *
     * <code>map&lt;string, int32&gt; num_rpcs_started_by_method = 1 [json_name = "numRpcsStartedByMethod", deprecated = true];</code>
     */
    @JvmName("putNumRpcsStartedByMethod")
    public fun com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.Int, NumRpcsStartedByMethodProxy>
      .put(key: kotlin.String, value: kotlin.Int) {
         _builder.putNumRpcsStartedByMethod(key, value)
       }
    /**
     * <pre>
     * The total number of RPCs have ever issued for each type.
     * Deprecated: use stats_per_method.rpcs_started instead.
     * </pre>
     *
     * <code>map&lt;string, int32&gt; num_rpcs_started_by_method = 1 [json_name = "numRpcsStartedByMethod", deprecated = true];</code>
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("setNumRpcsStartedByMethod")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.Int, NumRpcsStartedByMethodProxy>
      .set(key: kotlin.String, value: kotlin.Int) {
         put(key, value)
       }
    /**
     * <pre>
     * The total number of RPCs have ever issued for each type.
     * Deprecated: use stats_per_method.rpcs_started instead.
     * </pre>
     *
     * <code>map&lt;string, int32&gt; num_rpcs_started_by_method = 1 [json_name = "numRpcsStartedByMethod", deprecated = true];</code>
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("removeNumRpcsStartedByMethod")
    public fun com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.Int, NumRpcsStartedByMethodProxy>
      .remove(key: kotlin.String) {
         _builder.removeNumRpcsStartedByMethod(key)
       }
    /**
     * <pre>
     * The total number of RPCs have ever issued for each type.
     * Deprecated: use stats_per_method.rpcs_started instead.
     * </pre>
     *
     * <code>map&lt;string, int32&gt; num_rpcs_started_by_method = 1 [json_name = "numRpcsStartedByMethod", deprecated = true];</code>
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("putAllNumRpcsStartedByMethod")
    public fun com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.Int, NumRpcsStartedByMethodProxy>
      .putAll(map: kotlin.collections.Map<kotlin.String, kotlin.Int>) {
         _builder.putAllNumRpcsStartedByMethod(map)
       }
    /**
     * <pre>
     * The total number of RPCs have ever issued for each type.
     * Deprecated: use stats_per_method.rpcs_started instead.
     * </pre>
     *
     * <code>map&lt;string, int32&gt; num_rpcs_started_by_method = 1 [json_name = "numRpcsStartedByMethod", deprecated = true];</code>
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("clearNumRpcsStartedByMethod")
    public fun com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.Int, NumRpcsStartedByMethodProxy>
      .clear() {
         _builder.clearNumRpcsStartedByMethod()
       }

    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    public class NumRpcsSucceededByMethodProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * <pre>
     * The total number of RPCs have ever completed successfully for each type.
     * Deprecated: use stats_per_method.result instead.
     * </pre>
     *
     * <code>map&lt;string, int32&gt; num_rpcs_succeeded_by_method = 2 [json_name = "numRpcsSucceededByMethod", deprecated = true];</code>
     */
    @kotlin.Deprecated(message = "Field numRpcsSucceededByMethod is deprecated")  public val numRpcsSucceededByMethod: com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.Int, NumRpcsSucceededByMethodProxy>
      @kotlin.jvm.JvmSynthetic
      @JvmName("getNumRpcsSucceededByMethodMap")
      get() = com.google.protobuf.kotlin.DslMap(
        _builder.getNumRpcsSucceededByMethodMap()
      )
    /**
     * <pre>
     * The total number of RPCs have ever completed successfully for each type.
     * Deprecated: use stats_per_method.result instead.
     * </pre>
     *
     * <code>map&lt;string, int32&gt; num_rpcs_succeeded_by_method = 2 [json_name = "numRpcsSucceededByMethod", deprecated = true];</code>
     */
    @JvmName("putNumRpcsSucceededByMethod")
    public fun com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.Int, NumRpcsSucceededByMethodProxy>
      .put(key: kotlin.String, value: kotlin.Int) {
         _builder.putNumRpcsSucceededByMethod(key, value)
       }
    /**
     * <pre>
     * The total number of RPCs have ever completed successfully for each type.
     * Deprecated: use stats_per_method.result instead.
     * </pre>
     *
     * <code>map&lt;string, int32&gt; num_rpcs_succeeded_by_method = 2 [json_name = "numRpcsSucceededByMethod", deprecated = true];</code>
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("setNumRpcsSucceededByMethod")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.Int, NumRpcsSucceededByMethodProxy>
      .set(key: kotlin.String, value: kotlin.Int) {
         put(key, value)
       }
    /**
     * <pre>
     * The total number of RPCs have ever completed successfully for each type.
     * Deprecated: use stats_per_method.result instead.
     * </pre>
     *
     * <code>map&lt;string, int32&gt; num_rpcs_succeeded_by_method = 2 [json_name = "numRpcsSucceededByMethod", deprecated = true];</code>
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("removeNumRpcsSucceededByMethod")
    public fun com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.Int, NumRpcsSucceededByMethodProxy>
      .remove(key: kotlin.String) {
         _builder.removeNumRpcsSucceededByMethod(key)
       }
    /**
     * <pre>
     * The total number of RPCs have ever completed successfully for each type.
     * Deprecated: use stats_per_method.result instead.
     * </pre>
     *
     * <code>map&lt;string, int32&gt; num_rpcs_succeeded_by_method = 2 [json_name = "numRpcsSucceededByMethod", deprecated = true];</code>
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("putAllNumRpcsSucceededByMethod")
    public fun com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.Int, NumRpcsSucceededByMethodProxy>
      .putAll(map: kotlin.collections.Map<kotlin.String, kotlin.Int>) {
         _builder.putAllNumRpcsSucceededByMethod(map)
       }
    /**
     * <pre>
     * The total number of RPCs have ever completed successfully for each type.
     * Deprecated: use stats_per_method.result instead.
     * </pre>
     *
     * <code>map&lt;string, int32&gt; num_rpcs_succeeded_by_method = 2 [json_name = "numRpcsSucceededByMethod", deprecated = true];</code>
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("clearNumRpcsSucceededByMethod")
    public fun com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.Int, NumRpcsSucceededByMethodProxy>
      .clear() {
         _builder.clearNumRpcsSucceededByMethod()
       }

    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    public class NumRpcsFailedByMethodProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * <pre>
     * The total number of RPCs have ever failed for each type.
     * Deprecated: use stats_per_method.result instead.
     * </pre>
     *
     * <code>map&lt;string, int32&gt; num_rpcs_failed_by_method = 3 [json_name = "numRpcsFailedByMethod", deprecated = true];</code>
     */
    @kotlin.Deprecated(message = "Field numRpcsFailedByMethod is deprecated")  public val numRpcsFailedByMethod: com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.Int, NumRpcsFailedByMethodProxy>
      @kotlin.jvm.JvmSynthetic
      @JvmName("getNumRpcsFailedByMethodMap")
      get() = com.google.protobuf.kotlin.DslMap(
        _builder.getNumRpcsFailedByMethodMap()
      )
    /**
     * <pre>
     * The total number of RPCs have ever failed for each type.
     * Deprecated: use stats_per_method.result instead.
     * </pre>
     *
     * <code>map&lt;string, int32&gt; num_rpcs_failed_by_method = 3 [json_name = "numRpcsFailedByMethod", deprecated = true];</code>
     */
    @JvmName("putNumRpcsFailedByMethod")
    public fun com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.Int, NumRpcsFailedByMethodProxy>
      .put(key: kotlin.String, value: kotlin.Int) {
         _builder.putNumRpcsFailedByMethod(key, value)
       }
    /**
     * <pre>
     * The total number of RPCs have ever failed for each type.
     * Deprecated: use stats_per_method.result instead.
     * </pre>
     *
     * <code>map&lt;string, int32&gt; num_rpcs_failed_by_method = 3 [json_name = "numRpcsFailedByMethod", deprecated = true];</code>
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("setNumRpcsFailedByMethod")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.Int, NumRpcsFailedByMethodProxy>
      .set(key: kotlin.String, value: kotlin.Int) {
         put(key, value)
       }
    /**
     * <pre>
     * The total number of RPCs have ever failed for each type.
     * Deprecated: use stats_per_method.result instead.
     * </pre>
     *
     * <code>map&lt;string, int32&gt; num_rpcs_failed_by_method = 3 [json_name = "numRpcsFailedByMethod", deprecated = true];</code>
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("removeNumRpcsFailedByMethod")
    public fun com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.Int, NumRpcsFailedByMethodProxy>
      .remove(key: kotlin.String) {
         _builder.removeNumRpcsFailedByMethod(key)
       }
    /**
     * <pre>
     * The total number of RPCs have ever failed for each type.
     * Deprecated: use stats_per_method.result instead.
     * </pre>
     *
     * <code>map&lt;string, int32&gt; num_rpcs_failed_by_method = 3 [json_name = "numRpcsFailedByMethod", deprecated = true];</code>
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("putAllNumRpcsFailedByMethod")
    public fun com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.Int, NumRpcsFailedByMethodProxy>
      .putAll(map: kotlin.collections.Map<kotlin.String, kotlin.Int>) {
         _builder.putAllNumRpcsFailedByMethod(map)
       }
    /**
     * <pre>
     * The total number of RPCs have ever failed for each type.
     * Deprecated: use stats_per_method.result instead.
     * </pre>
     *
     * <code>map&lt;string, int32&gt; num_rpcs_failed_by_method = 3 [json_name = "numRpcsFailedByMethod", deprecated = true];</code>
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("clearNumRpcsFailedByMethod")
    public fun com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.Int, NumRpcsFailedByMethodProxy>
      .clear() {
         _builder.clearNumRpcsFailedByMethod()
       }

    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    public class StatsPerMethodProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * <pre>
     * Per-method RPC statistics.  The key is the RpcType in string form; e.g.
     * 'EMPTY_CALL' or 'UNARY_CALL'
     * </pre>
     *
     * <code>map&lt;string, .grpc.testing.LoadBalancerAccumulatedStatsResponse.MethodStats&gt; stats_per_method = 4 [json_name = "statsPerMethod"];</code>
     */
     public val statsPerMethod: com.google.protobuf.kotlin.DslMap<kotlin.String, com.grpc.testing.LoadBalancerAccumulatedStatsResponse.MethodStats, StatsPerMethodProxy>
      @kotlin.jvm.JvmSynthetic
      @JvmName("getStatsPerMethodMap")
      get() = com.google.protobuf.kotlin.DslMap(
        _builder.getStatsPerMethodMap()
      )
    /**
     * <pre>
     * Per-method RPC statistics.  The key is the RpcType in string form; e.g.
     * 'EMPTY_CALL' or 'UNARY_CALL'
     * </pre>
     *
     * <code>map&lt;string, .grpc.testing.LoadBalancerAccumulatedStatsResponse.MethodStats&gt; stats_per_method = 4 [json_name = "statsPerMethod"];</code>
     */
    @JvmName("putStatsPerMethod")
    public fun com.google.protobuf.kotlin.DslMap<kotlin.String, com.grpc.testing.LoadBalancerAccumulatedStatsResponse.MethodStats, StatsPerMethodProxy>
      .put(key: kotlin.String, value: com.grpc.testing.LoadBalancerAccumulatedStatsResponse.MethodStats) {
         _builder.putStatsPerMethod(key, value)
       }
    /**
     * <pre>
     * Per-method RPC statistics.  The key is the RpcType in string form; e.g.
     * 'EMPTY_CALL' or 'UNARY_CALL'
     * </pre>
     *
     * <code>map&lt;string, .grpc.testing.LoadBalancerAccumulatedStatsResponse.MethodStats&gt; stats_per_method = 4 [json_name = "statsPerMethod"];</code>
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("setStatsPerMethod")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslMap<kotlin.String, com.grpc.testing.LoadBalancerAccumulatedStatsResponse.MethodStats, StatsPerMethodProxy>
      .set(key: kotlin.String, value: com.grpc.testing.LoadBalancerAccumulatedStatsResponse.MethodStats) {
         put(key, value)
       }
    /**
     * <pre>
     * Per-method RPC statistics.  The key is the RpcType in string form; e.g.
     * 'EMPTY_CALL' or 'UNARY_CALL'
     * </pre>
     *
     * <code>map&lt;string, .grpc.testing.LoadBalancerAccumulatedStatsResponse.MethodStats&gt; stats_per_method = 4 [json_name = "statsPerMethod"];</code>
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("removeStatsPerMethod")
    public fun com.google.protobuf.kotlin.DslMap<kotlin.String, com.grpc.testing.LoadBalancerAccumulatedStatsResponse.MethodStats, StatsPerMethodProxy>
      .remove(key: kotlin.String) {
         _builder.removeStatsPerMethod(key)
       }
    /**
     * <pre>
     * Per-method RPC statistics.  The key is the RpcType in string form; e.g.
     * 'EMPTY_CALL' or 'UNARY_CALL'
     * </pre>
     *
     * <code>map&lt;string, .grpc.testing.LoadBalancerAccumulatedStatsResponse.MethodStats&gt; stats_per_method = 4 [json_name = "statsPerMethod"];</code>
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("putAllStatsPerMethod")
    public fun com.google.protobuf.kotlin.DslMap<kotlin.String, com.grpc.testing.LoadBalancerAccumulatedStatsResponse.MethodStats, StatsPerMethodProxy>
      .putAll(map: kotlin.collections.Map<kotlin.String, com.grpc.testing.LoadBalancerAccumulatedStatsResponse.MethodStats>) {
         _builder.putAllStatsPerMethod(map)
       }
    /**
     * <pre>
     * Per-method RPC statistics.  The key is the RpcType in string form; e.g.
     * 'EMPTY_CALL' or 'UNARY_CALL'
     * </pre>
     *
     * <code>map&lt;string, .grpc.testing.LoadBalancerAccumulatedStatsResponse.MethodStats&gt; stats_per_method = 4 [json_name = "statsPerMethod"];</code>
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("clearStatsPerMethod")
    public fun com.google.protobuf.kotlin.DslMap<kotlin.String, com.grpc.testing.LoadBalancerAccumulatedStatsResponse.MethodStats, StatsPerMethodProxy>
      .clear() {
         _builder.clearStatsPerMethod()
       }
  }
  @kotlin.jvm.JvmName("-initializemethodStats")
  public inline fun methodStats(block: com.grpc.testing.LoadBalancerAccumulatedStatsResponseKt.MethodStatsKt.Dsl.() -> kotlin.Unit): com.grpc.testing.LoadBalancerAccumulatedStatsResponse.MethodStats =
    com.grpc.testing.LoadBalancerAccumulatedStatsResponseKt.MethodStatsKt.Dsl._create(com.grpc.testing.LoadBalancerAccumulatedStatsResponse.MethodStats.newBuilder()).apply { block() }._build()
  public object MethodStatsKt {
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    @com.google.protobuf.kotlin.ProtoDslMarker
    public class Dsl private constructor(
      private val _builder: com.grpc.testing.LoadBalancerAccumulatedStatsResponse.MethodStats.Builder
    ) {
      public companion object {
        @kotlin.jvm.JvmSynthetic
        @kotlin.PublishedApi
        internal fun _create(builder: com.grpc.testing.LoadBalancerAccumulatedStatsResponse.MethodStats.Builder): Dsl = Dsl(builder)
      }

      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _build(): com.grpc.testing.LoadBalancerAccumulatedStatsResponse.MethodStats = _builder.build()

      /**
       * <pre>
       * The number of RPCs that were started for this method.
       * </pre>
       *
       * <code>int32 rpcs_started = 1 [json_name = "rpcsStarted"];</code>
       */
      public var rpcsStarted: kotlin.Int
        @JvmName("getRpcsStarted")
        get() = _builder.getRpcsStarted()
        @JvmName("setRpcsStarted")
        set(value) {
          _builder.setRpcsStarted(value)
        }
      /**
       * <pre>
       * The number of RPCs that were started for this method.
       * </pre>
       *
       * <code>int32 rpcs_started = 1 [json_name = "rpcsStarted"];</code>
       */
      public fun clearRpcsStarted() {
        _builder.clearRpcsStarted()
      }

      /**
       * An uninstantiable, behaviorless type to represent the field in
       * generics.
       */
      @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
      public class ResultProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
      /**
       * <pre>
       * The number of RPCs that completed with each status for this method.  The
       * key is the integral value of a google.rpc.Code; the value is the count.
       * </pre>
       *
       * <code>map&lt;int32, int32&gt; result = 2 [json_name = "result"];</code>
       */
       public val result: com.google.protobuf.kotlin.DslMap<kotlin.Int, kotlin.Int, ResultProxy>
        @kotlin.jvm.JvmSynthetic
        @JvmName("getResultMap")
        get() = com.google.protobuf.kotlin.DslMap(
          _builder.getResultMap()
        )
      /**
       * <pre>
       * The number of RPCs that completed with each status for this method.  The
       * key is the integral value of a google.rpc.Code; the value is the count.
       * </pre>
       *
       * <code>map&lt;int32, int32&gt; result = 2 [json_name = "result"];</code>
       */
      @JvmName("putResult")
      public fun com.google.protobuf.kotlin.DslMap<kotlin.Int, kotlin.Int, ResultProxy>
        .put(key: kotlin.Int, value: kotlin.Int) {
           _builder.putResult(key, value)
         }
      /**
       * <pre>
       * The number of RPCs that completed with each status for this method.  The
       * key is the integral value of a google.rpc.Code; the value is the count.
       * </pre>
       *
       * <code>map&lt;int32, int32&gt; result = 2 [json_name = "result"];</code>
       */
      @kotlin.jvm.JvmSynthetic
      @JvmName("setResult")
      @Suppress("NOTHING_TO_INLINE")
      public inline operator fun com.google.protobuf.kotlin.DslMap<kotlin.Int, kotlin.Int, ResultProxy>
        .set(key: kotlin.Int, value: kotlin.Int) {
           put(key, value)
         }
      /**
       * <pre>
       * The number of RPCs that completed with each status for this method.  The
       * key is the integral value of a google.rpc.Code; the value is the count.
       * </pre>
       *
       * <code>map&lt;int32, int32&gt; result = 2 [json_name = "result"];</code>
       */
      @kotlin.jvm.JvmSynthetic
      @JvmName("removeResult")
      public fun com.google.protobuf.kotlin.DslMap<kotlin.Int, kotlin.Int, ResultProxy>
        .remove(key: kotlin.Int) {
           _builder.removeResult(key)
         }
      /**
       * <pre>
       * The number of RPCs that completed with each status for this method.  The
       * key is the integral value of a google.rpc.Code; the value is the count.
       * </pre>
       *
       * <code>map&lt;int32, int32&gt; result = 2 [json_name = "result"];</code>
       */
      @kotlin.jvm.JvmSynthetic
      @JvmName("putAllResult")
      public fun com.google.protobuf.kotlin.DslMap<kotlin.Int, kotlin.Int, ResultProxy>
        .putAll(map: kotlin.collections.Map<kotlin.Int, kotlin.Int>) {
           _builder.putAllResult(map)
         }
      /**
       * <pre>
       * The number of RPCs that completed with each status for this method.  The
       * key is the integral value of a google.rpc.Code; the value is the count.
       * </pre>
       *
       * <code>map&lt;int32, int32&gt; result = 2 [json_name = "result"];</code>
       */
      @kotlin.jvm.JvmSynthetic
      @JvmName("clearResult")
      public fun com.google.protobuf.kotlin.DslMap<kotlin.Int, kotlin.Int, ResultProxy>
        .clear() {
           _builder.clearResult()
         }
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun com.grpc.testing.LoadBalancerAccumulatedStatsResponse.copy(block: com.grpc.testing.LoadBalancerAccumulatedStatsResponseKt.Dsl.() -> kotlin.Unit): com.grpc.testing.LoadBalancerAccumulatedStatsResponse =
  com.grpc.testing.LoadBalancerAccumulatedStatsResponseKt.Dsl._create(this.toBuilder()).apply { block() }._build()

@kotlin.jvm.JvmSynthetic
public inline fun com.grpc.testing.LoadBalancerAccumulatedStatsResponse.MethodStats.copy(block: com.grpc.testing.LoadBalancerAccumulatedStatsResponseKt.MethodStatsKt.Dsl.() -> kotlin.Unit): com.grpc.testing.LoadBalancerAccumulatedStatsResponse.MethodStats =
  com.grpc.testing.LoadBalancerAccumulatedStatsResponseKt.MethodStatsKt.Dsl._create(this.toBuilder()).apply { block() }._build()

