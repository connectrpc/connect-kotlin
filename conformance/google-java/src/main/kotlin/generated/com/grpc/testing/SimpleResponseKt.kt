// Copyright 2022-2023 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: grpc/testing/messages.proto

package com.grpc.testing;

@kotlin.jvm.JvmName("-initializesimpleResponse")
public inline fun simpleResponse(block: com.grpc.testing.SimpleResponseKt.Dsl.() -> kotlin.Unit): com.grpc.testing.SimpleResponse =
  com.grpc.testing.SimpleResponseKt.Dsl._create(com.grpc.testing.SimpleResponse.newBuilder()).apply { block() }._build()
public object SimpleResponseKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: com.grpc.testing.SimpleResponse.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: com.grpc.testing.SimpleResponse.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): com.grpc.testing.SimpleResponse = _builder.build()

    /**
     * <pre>
     * Payload to increase message size.
     * </pre>
     *
     * <code>.grpc.testing.Payload payload = 1 [json_name = "payload"];</code>
     */
    public var payload: com.grpc.testing.Payload
      @JvmName("getPayload")
      get() = _builder.getPayload()
      @JvmName("setPayload")
      set(value) {
        _builder.setPayload(value)
      }
    /**
     * <pre>
     * Payload to increase message size.
     * </pre>
     *
     * <code>.grpc.testing.Payload payload = 1 [json_name = "payload"];</code>
     */
    public fun clearPayload() {
      _builder.clearPayload()
    }
    /**
     * <pre>
     * Payload to increase message size.
     * </pre>
     *
     * <code>.grpc.testing.Payload payload = 1 [json_name = "payload"];</code>
     * @return Whether the payload field is set.
     */
    public fun hasPayload(): kotlin.Boolean {
      return _builder.hasPayload()
    }

    /**
     * <pre>
     * The user the request came from, for verifying authentication was
     * successful when the client expected it.
     * </pre>
     *
     * <code>string username = 2 [json_name = "username"];</code>
     */
    public var username: kotlin.String
      @JvmName("getUsername")
      get() = _builder.getUsername()
      @JvmName("setUsername")
      set(value) {
        _builder.setUsername(value)
      }
    /**
     * <pre>
     * The user the request came from, for verifying authentication was
     * successful when the client expected it.
     * </pre>
     *
     * <code>string username = 2 [json_name = "username"];</code>
     */
    public fun clearUsername() {
      _builder.clearUsername()
    }

    /**
     * <pre>
     * OAuth scope.
     * </pre>
     *
     * <code>string oauth_scope = 3 [json_name = "oauthScope"];</code>
     */
    public var oauthScope: kotlin.String
      @JvmName("getOauthScope")
      get() = _builder.getOauthScope()
      @JvmName("setOauthScope")
      set(value) {
        _builder.setOauthScope(value)
      }
    /**
     * <pre>
     * OAuth scope.
     * </pre>
     *
     * <code>string oauth_scope = 3 [json_name = "oauthScope"];</code>
     */
    public fun clearOauthScope() {
      _builder.clearOauthScope()
    }

    /**
     * <pre>
     * Server ID. This must be unique among different server instances,
     * but the same across all RPC's made to a particular server instance.
     * </pre>
     *
     * <code>string server_id = 4 [json_name = "serverId"];</code>
     */
    public var serverId: kotlin.String
      @JvmName("getServerId")
      get() = _builder.getServerId()
      @JvmName("setServerId")
      set(value) {
        _builder.setServerId(value)
      }
    /**
     * <pre>
     * Server ID. This must be unique among different server instances,
     * but the same across all RPC's made to a particular server instance.
     * </pre>
     *
     * <code>string server_id = 4 [json_name = "serverId"];</code>
     */
    public fun clearServerId() {
      _builder.clearServerId()
    }

    /**
     * <pre>
     * gRPCLB Path.
     * </pre>
     *
     * <code>.grpc.testing.GrpclbRouteType grpclb_route_type = 5 [json_name = "grpclbRouteType"];</code>
     */
    public var grpclbRouteType: com.grpc.testing.GrpclbRouteType
      @JvmName("getGrpclbRouteType")
      get() = _builder.getGrpclbRouteType()
      @JvmName("setGrpclbRouteType")
      set(value) {
        _builder.setGrpclbRouteType(value)
      }
    /**
     * <pre>
     * gRPCLB Path.
     * </pre>
     *
     * <code>.grpc.testing.GrpclbRouteType grpclb_route_type = 5 [json_name = "grpclbRouteType"];</code>
     */
    public fun clearGrpclbRouteType() {
      _builder.clearGrpclbRouteType()
    }

    /**
     * <pre>
     * Server hostname.
     * </pre>
     *
     * <code>string hostname = 6 [json_name = "hostname"];</code>
     */
    public var hostname: kotlin.String
      @JvmName("getHostname")
      get() = _builder.getHostname()
      @JvmName("setHostname")
      set(value) {
        _builder.setHostname(value)
      }
    /**
     * <pre>
     * Server hostname.
     * </pre>
     *
     * <code>string hostname = 6 [json_name = "hostname"];</code>
     */
    public fun clearHostname() {
      _builder.clearHostname()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun com.grpc.testing.SimpleResponse.copy(block: com.grpc.testing.SimpleResponseKt.Dsl.() -> kotlin.Unit): com.grpc.testing.SimpleResponse =
  com.grpc.testing.SimpleResponseKt.Dsl._create(this.toBuilder()).apply { block() }._build()

val com.grpc.testing.SimpleResponseOrBuilder.payloadOrNull: com.grpc.testing.Payload?
  get() = if (hasPayload()) getPayload() else null

