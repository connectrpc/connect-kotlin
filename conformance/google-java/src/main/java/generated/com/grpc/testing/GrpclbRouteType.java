// Copyright 2022-2023 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: grpc/testing/messages.proto

package com.grpc.testing;

/**
 * <pre>
 * The type of route that a client took to reach a server w.r.t. gRPCLB.
 * The server must fill in "fallback" if it detects that the RPC reached
 * the server via the "gRPCLB fallback" path, and "backend" if it detects
 * that the RPC reached the server via "gRPCLB backend" path (i.e. if it got
 * the address of this server from the gRPCLB server BalanceLoad RPC). Exactly
 * how this detection is done is context and server dependent.
 * </pre>
 *
 * Protobuf enum {@code grpc.testing.GrpclbRouteType}
 */
public enum GrpclbRouteType
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <pre>
   * Server didn't detect the route that a client took to reach it.
   * </pre>
   *
   * <code>GRPCLB_ROUTE_TYPE_UNKNOWN = 0;</code>
   */
  GRPCLB_ROUTE_TYPE_UNKNOWN(0),
  /**
   * <pre>
   * Indicates that a client reached a server via gRPCLB fallback.
   * </pre>
   *
   * <code>GRPCLB_ROUTE_TYPE_FALLBACK = 1;</code>
   */
  GRPCLB_ROUTE_TYPE_FALLBACK(1),
  /**
   * <pre>
   * Indicates that a client reached a server as a gRPCLB-given backend.
   * </pre>
   *
   * <code>GRPCLB_ROUTE_TYPE_BACKEND = 2;</code>
   */
  GRPCLB_ROUTE_TYPE_BACKEND(2),
  UNRECOGNIZED(-1),
  ;

  /**
   * <pre>
   * Server didn't detect the route that a client took to reach it.
   * </pre>
   *
   * <code>GRPCLB_ROUTE_TYPE_UNKNOWN = 0;</code>
   */
  public static final int GRPCLB_ROUTE_TYPE_UNKNOWN_VALUE = 0;
  /**
   * <pre>
   * Indicates that a client reached a server via gRPCLB fallback.
   * </pre>
   *
   * <code>GRPCLB_ROUTE_TYPE_FALLBACK = 1;</code>
   */
  public static final int GRPCLB_ROUTE_TYPE_FALLBACK_VALUE = 1;
  /**
   * <pre>
   * Indicates that a client reached a server as a gRPCLB-given backend.
   * </pre>
   *
   * <code>GRPCLB_ROUTE_TYPE_BACKEND = 2;</code>
   */
  public static final int GRPCLB_ROUTE_TYPE_BACKEND_VALUE = 2;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static GrpclbRouteType valueOf(int value) {
    return forNumber(value);
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   */
  public static GrpclbRouteType forNumber(int value) {
    switch (value) {
      case 0: return GRPCLB_ROUTE_TYPE_UNKNOWN;
      case 1: return GRPCLB_ROUTE_TYPE_FALLBACK;
      case 2: return GRPCLB_ROUTE_TYPE_BACKEND;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<GrpclbRouteType>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      GrpclbRouteType> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<GrpclbRouteType>() {
          public GrpclbRouteType findValueByNumber(int number) {
            return GrpclbRouteType.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalStateException(
          "Can't get the descriptor of an unrecognized enum value.");
    }
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return com.grpc.testing.MessagesProto.getDescriptor().getEnumTypes().get(1);
  }

  private static final GrpclbRouteType[] VALUES = values();

  public static GrpclbRouteType valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private GrpclbRouteType(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:grpc.testing.GrpclbRouteType)
}

