// Copyright 2022-2023 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: grpc/testing/messages.proto

package com.grpc.testing;

public interface SimpleRequestOrBuilder extends
    // @@protoc_insertion_point(interface_extends:grpc.testing.SimpleRequest)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Desired payload type in the response from the server.
   * If response_type is RANDOM, server randomly chooses one from other formats.
   * </pre>
   *
   * <code>.grpc.testing.PayloadType response_type = 1 [json_name = "responseType"];</code>
   * @return The enum numeric value on the wire for responseType.
   */
  int getResponseTypeValue();
  /**
   * <pre>
   * Desired payload type in the response from the server.
   * If response_type is RANDOM, server randomly chooses one from other formats.
   * </pre>
   *
   * <code>.grpc.testing.PayloadType response_type = 1 [json_name = "responseType"];</code>
   * @return The responseType.
   */
  com.grpc.testing.PayloadType getResponseType();

  /**
   * <pre>
   * Desired payload size in the response from the server.
   * </pre>
   *
   * <code>int32 response_size = 2 [json_name = "responseSize"];</code>
   * @return The responseSize.
   */
  int getResponseSize();

  /**
   * <pre>
   * Optional input payload sent along with the request.
   * </pre>
   *
   * <code>.grpc.testing.Payload payload = 3 [json_name = "payload"];</code>
   * @return Whether the payload field is set.
   */
  boolean hasPayload();
  /**
   * <pre>
   * Optional input payload sent along with the request.
   * </pre>
   *
   * <code>.grpc.testing.Payload payload = 3 [json_name = "payload"];</code>
   * @return The payload.
   */
  com.grpc.testing.Payload getPayload();
  /**
   * <pre>
   * Optional input payload sent along with the request.
   * </pre>
   *
   * <code>.grpc.testing.Payload payload = 3 [json_name = "payload"];</code>
   */
  com.grpc.testing.PayloadOrBuilder getPayloadOrBuilder();

  /**
   * <pre>
   * Whether SimpleResponse should include username.
   * </pre>
   *
   * <code>bool fill_username = 4 [json_name = "fillUsername"];</code>
   * @return The fillUsername.
   */
  boolean getFillUsername();

  /**
   * <pre>
   * Whether SimpleResponse should include OAuth scope.
   * </pre>
   *
   * <code>bool fill_oauth_scope = 5 [json_name = "fillOauthScope"];</code>
   * @return The fillOauthScope.
   */
  boolean getFillOauthScope();

  /**
   * <pre>
   * Whether to request the server to compress the response. This field is
   * "nullable" in order to interoperate seamlessly with clients not able to
   * implement the full compression tests by introspecting the call to verify
   * the response's compression status.
   * </pre>
   *
   * <code>.grpc.testing.BoolValue response_compressed = 6 [json_name = "responseCompressed"];</code>
   * @return Whether the responseCompressed field is set.
   */
  boolean hasResponseCompressed();
  /**
   * <pre>
   * Whether to request the server to compress the response. This field is
   * "nullable" in order to interoperate seamlessly with clients not able to
   * implement the full compression tests by introspecting the call to verify
   * the response's compression status.
   * </pre>
   *
   * <code>.grpc.testing.BoolValue response_compressed = 6 [json_name = "responseCompressed"];</code>
   * @return The responseCompressed.
   */
  com.grpc.testing.BoolValue getResponseCompressed();
  /**
   * <pre>
   * Whether to request the server to compress the response. This field is
   * "nullable" in order to interoperate seamlessly with clients not able to
   * implement the full compression tests by introspecting the call to verify
   * the response's compression status.
   * </pre>
   *
   * <code>.grpc.testing.BoolValue response_compressed = 6 [json_name = "responseCompressed"];</code>
   */
  com.grpc.testing.BoolValueOrBuilder getResponseCompressedOrBuilder();

  /**
   * <pre>
   * Whether server should return a given status
   * </pre>
   *
   * <code>.grpc.testing.EchoStatus response_status = 7 [json_name = "responseStatus"];</code>
   * @return Whether the responseStatus field is set.
   */
  boolean hasResponseStatus();
  /**
   * <pre>
   * Whether server should return a given status
   * </pre>
   *
   * <code>.grpc.testing.EchoStatus response_status = 7 [json_name = "responseStatus"];</code>
   * @return The responseStatus.
   */
  com.grpc.testing.EchoStatus getResponseStatus();
  /**
   * <pre>
   * Whether server should return a given status
   * </pre>
   *
   * <code>.grpc.testing.EchoStatus response_status = 7 [json_name = "responseStatus"];</code>
   */
  com.grpc.testing.EchoStatusOrBuilder getResponseStatusOrBuilder();

  /**
   * <pre>
   * Whether the server should expect this request to be compressed.
   * </pre>
   *
   * <code>.grpc.testing.BoolValue expect_compressed = 8 [json_name = "expectCompressed"];</code>
   * @return Whether the expectCompressed field is set.
   */
  boolean hasExpectCompressed();
  /**
   * <pre>
   * Whether the server should expect this request to be compressed.
   * </pre>
   *
   * <code>.grpc.testing.BoolValue expect_compressed = 8 [json_name = "expectCompressed"];</code>
   * @return The expectCompressed.
   */
  com.grpc.testing.BoolValue getExpectCompressed();
  /**
   * <pre>
   * Whether the server should expect this request to be compressed.
   * </pre>
   *
   * <code>.grpc.testing.BoolValue expect_compressed = 8 [json_name = "expectCompressed"];</code>
   */
  com.grpc.testing.BoolValueOrBuilder getExpectCompressedOrBuilder();

  /**
   * <pre>
   * Whether SimpleResponse should include server_id.
   * </pre>
   *
   * <code>bool fill_server_id = 9 [json_name = "fillServerId"];</code>
   * @return The fillServerId.
   */
  boolean getFillServerId();

  /**
   * <pre>
   * Whether SimpleResponse should include grpclb_route_type.
   * </pre>
   *
   * <code>bool fill_grpclb_route_type = 10 [json_name = "fillGrpclbRouteType"];</code>
   * @return The fillGrpclbRouteType.
   */
  boolean getFillGrpclbRouteType();
}
