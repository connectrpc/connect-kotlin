// Copyright 2022-2023 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: grpc/testing/messages.proto

package com.grpc.testing;

public interface LoadBalancerStatsResponseOrBuilder extends
    // @@protoc_insertion_point(interface_extends:grpc.testing.LoadBalancerStatsResponse)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * The number of completed RPCs for each peer.
   * </pre>
   *
   * <code>map&lt;string, int32&gt; rpcs_by_peer = 1 [json_name = "rpcsByPeer"];</code>
   */
  int getRpcsByPeerCount();
  /**
   * <pre>
   * The number of completed RPCs for each peer.
   * </pre>
   *
   * <code>map&lt;string, int32&gt; rpcs_by_peer = 1 [json_name = "rpcsByPeer"];</code>
   */
  boolean containsRpcsByPeer(
      java.lang.String key);
  /**
   * Use {@link #getRpcsByPeerMap()} instead.
   */
  @java.lang.Deprecated
  java.util.Map<java.lang.String, java.lang.Integer>
  getRpcsByPeer();
  /**
   * <pre>
   * The number of completed RPCs for each peer.
   * </pre>
   *
   * <code>map&lt;string, int32&gt; rpcs_by_peer = 1 [json_name = "rpcsByPeer"];</code>
   */
  java.util.Map<java.lang.String, java.lang.Integer>
  getRpcsByPeerMap();
  /**
   * <pre>
   * The number of completed RPCs for each peer.
   * </pre>
   *
   * <code>map&lt;string, int32&gt; rpcs_by_peer = 1 [json_name = "rpcsByPeer"];</code>
   */

  int getRpcsByPeerOrDefault(
      java.lang.String key,
      int defaultValue);
  /**
   * <pre>
   * The number of completed RPCs for each peer.
   * </pre>
   *
   * <code>map&lt;string, int32&gt; rpcs_by_peer = 1 [json_name = "rpcsByPeer"];</code>
   */

  int getRpcsByPeerOrThrow(
      java.lang.String key);

  /**
   * <pre>
   * The number of RPCs that failed to record a remote peer.
   * </pre>
   *
   * <code>int32 num_failures = 2 [json_name = "numFailures"];</code>
   * @return The numFailures.
   */
  int getNumFailures();

  /**
   * <code>map&lt;string, .grpc.testing.LoadBalancerStatsResponse.RpcsByPeer&gt; rpcs_by_method = 3 [json_name = "rpcsByMethod"];</code>
   */
  int getRpcsByMethodCount();
  /**
   * <code>map&lt;string, .grpc.testing.LoadBalancerStatsResponse.RpcsByPeer&gt; rpcs_by_method = 3 [json_name = "rpcsByMethod"];</code>
   */
  boolean containsRpcsByMethod(
      java.lang.String key);
  /**
   * Use {@link #getRpcsByMethodMap()} instead.
   */
  @java.lang.Deprecated
  java.util.Map<java.lang.String, com.grpc.testing.LoadBalancerStatsResponse.RpcsByPeer>
  getRpcsByMethod();
  /**
   * <code>map&lt;string, .grpc.testing.LoadBalancerStatsResponse.RpcsByPeer&gt; rpcs_by_method = 3 [json_name = "rpcsByMethod"];</code>
   */
  java.util.Map<java.lang.String, com.grpc.testing.LoadBalancerStatsResponse.RpcsByPeer>
  getRpcsByMethodMap();
  /**
   * <code>map&lt;string, .grpc.testing.LoadBalancerStatsResponse.RpcsByPeer&gt; rpcs_by_method = 3 [json_name = "rpcsByMethod"];</code>
   */

  /* nullable */
com.grpc.testing.LoadBalancerStatsResponse.RpcsByPeer getRpcsByMethodOrDefault(
      java.lang.String key,
      /* nullable */
com.grpc.testing.LoadBalancerStatsResponse.RpcsByPeer defaultValue);
  /**
   * <code>map&lt;string, .grpc.testing.LoadBalancerStatsResponse.RpcsByPeer&gt; rpcs_by_method = 3 [json_name = "rpcsByMethod"];</code>
   */

  com.grpc.testing.LoadBalancerStatsResponse.RpcsByPeer getRpcsByMethodOrThrow(
      java.lang.String key);
}
