// Copyright 2022-2023 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: grpc/testing/messages.proto

package com.grpc.testing;

public interface ClientConfigureRequestOrBuilder extends
    // @@protoc_insertion_point(interface_extends:grpc.testing.ClientConfigureRequest)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * The types of RPCs the client sends.
   * </pre>
   *
   * <code>repeated .grpc.testing.ClientConfigureRequest.RpcType types = 1 [json_name = "types"];</code>
   * @return A list containing the types.
   */
  java.util.List<com.grpc.testing.ClientConfigureRequest.RpcType> getTypesList();
  /**
   * <pre>
   * The types of RPCs the client sends.
   * </pre>
   *
   * <code>repeated .grpc.testing.ClientConfigureRequest.RpcType types = 1 [json_name = "types"];</code>
   * @return The count of types.
   */
  int getTypesCount();
  /**
   * <pre>
   * The types of RPCs the client sends.
   * </pre>
   *
   * <code>repeated .grpc.testing.ClientConfigureRequest.RpcType types = 1 [json_name = "types"];</code>
   * @param index The index of the element to return.
   * @return The types at the given index.
   */
  com.grpc.testing.ClientConfigureRequest.RpcType getTypes(int index);
  /**
   * <pre>
   * The types of RPCs the client sends.
   * </pre>
   *
   * <code>repeated .grpc.testing.ClientConfigureRequest.RpcType types = 1 [json_name = "types"];</code>
   * @return A list containing the enum numeric values on the wire for types.
   */
  java.util.List<java.lang.Integer>
  getTypesValueList();
  /**
   * <pre>
   * The types of RPCs the client sends.
   * </pre>
   *
   * <code>repeated .grpc.testing.ClientConfigureRequest.RpcType types = 1 [json_name = "types"];</code>
   * @param index The index of the value to return.
   * @return The enum numeric value on the wire of types at the given index.
   */
  int getTypesValue(int index);

  /**
   * <pre>
   * The collection of custom metadata to be attached to RPCs sent by the client.
   * </pre>
   *
   * <code>repeated .grpc.testing.ClientConfigureRequest.Metadata metadata = 2 [json_name = "metadata"];</code>
   */
  java.util.List<com.grpc.testing.ClientConfigureRequest.Metadata> 
      getMetadataList();
  /**
   * <pre>
   * The collection of custom metadata to be attached to RPCs sent by the client.
   * </pre>
   *
   * <code>repeated .grpc.testing.ClientConfigureRequest.Metadata metadata = 2 [json_name = "metadata"];</code>
   */
  com.grpc.testing.ClientConfigureRequest.Metadata getMetadata(int index);
  /**
   * <pre>
   * The collection of custom metadata to be attached to RPCs sent by the client.
   * </pre>
   *
   * <code>repeated .grpc.testing.ClientConfigureRequest.Metadata metadata = 2 [json_name = "metadata"];</code>
   */
  int getMetadataCount();
  /**
   * <pre>
   * The collection of custom metadata to be attached to RPCs sent by the client.
   * </pre>
   *
   * <code>repeated .grpc.testing.ClientConfigureRequest.Metadata metadata = 2 [json_name = "metadata"];</code>
   */
  java.util.List<? extends com.grpc.testing.ClientConfigureRequest.MetadataOrBuilder> 
      getMetadataOrBuilderList();
  /**
   * <pre>
   * The collection of custom metadata to be attached to RPCs sent by the client.
   * </pre>
   *
   * <code>repeated .grpc.testing.ClientConfigureRequest.Metadata metadata = 2 [json_name = "metadata"];</code>
   */
  com.grpc.testing.ClientConfigureRequest.MetadataOrBuilder getMetadataOrBuilder(
      int index);

  /**
   * <pre>
   * The deadline to use, in seconds, for all RPCs.  If unset or zero, the
   * client will use the default from the command-line.
   * </pre>
   *
   * <code>int32 timeout_sec = 3 [json_name = "timeoutSec"];</code>
   * @return The timeoutSec.
   */
  int getTimeoutSec();
}
