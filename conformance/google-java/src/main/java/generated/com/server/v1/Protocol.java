// Copyright 2022-2023 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: server/v1/server.proto

package com.server.v1;

/**
 * Protobuf enum {@code server.v1.Protocol}
 */
public enum Protocol
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <code>PROTOCOL_UNSPECIFIED = 0;</code>
   */
  PROTOCOL_UNSPECIFIED(0),
  /**
   * <code>PROTOCOL_GRPC = 1;</code>
   */
  PROTOCOL_GRPC(1),
  /**
   * <code>PROTOCOL_GRPC_WEB = 2;</code>
   */
  PROTOCOL_GRPC_WEB(2),
  UNRECOGNIZED(-1),
  ;

  /**
   * <code>PROTOCOL_UNSPECIFIED = 0;</code>
   */
  public static final int PROTOCOL_UNSPECIFIED_VALUE = 0;
  /**
   * <code>PROTOCOL_GRPC = 1;</code>
   */
  public static final int PROTOCOL_GRPC_VALUE = 1;
  /**
   * <code>PROTOCOL_GRPC_WEB = 2;</code>
   */
  public static final int PROTOCOL_GRPC_WEB_VALUE = 2;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static Protocol valueOf(int value) {
    return forNumber(value);
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   */
  public static Protocol forNumber(int value) {
    switch (value) {
      case 0: return PROTOCOL_UNSPECIFIED;
      case 1: return PROTOCOL_GRPC;
      case 2: return PROTOCOL_GRPC_WEB;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<Protocol>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      Protocol> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<Protocol>() {
          public Protocol findValueByNumber(int number) {
            return Protocol.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalStateException(
          "Can't get the descriptor of an unrecognized enum value.");
    }
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return com.server.v1.ServerProto.getDescriptor().getEnumTypes().get(0);
  }

  private static final Protocol[] VALUES = values();

  public static Protocol valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private Protocol(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:server.v1.Protocol)
}

